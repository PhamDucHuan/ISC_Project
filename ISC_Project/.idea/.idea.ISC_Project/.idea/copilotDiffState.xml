<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/Controllers/PrivateChatController.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Controllers/PrivateChatController.cs" />
              <option name="updatedContent" value="using Microsoft.AspNetCore.Mvc;&#10;using Microsoft.AspNetCore.Authorization;&#10;using ISC_Project.Interface;&#10;using ISC_Project.DTOs.PrivateChat;&#10;using System.Security.Claims;&#10;&#10;namespace ISC_Project.Controllers&#10;{&#10;    [ApiController]&#10;    [Route(&quot;api/[controller]&quot;)]&#10;    [Authorize]&#10;    public class PrivateChatController : ControllerBase&#10;    {&#10;        private readonly IPrivateChatService _privateChatService;&#10;&#10;        public PrivateChatController(IPrivateChatService privateChatService)&#10;        {&#10;            _privateChatService = privateChatService;&#10;        }&#10;&#10;        /// &lt;summary&gt;&#10;        /// Gửi tin nhắn riêng tư&#10;        /// &lt;/summary&gt;&#10;        [HttpPost(&quot;send&quot;)]&#10;        public async Task&lt;IActionResult&gt; SendMessage([FromBody] SendMessageDto messageDto)&#10;        {&#10;            try&#10;            {&#10;                var senderId = GetCurrentUserId();&#10;                var result = await _privateChatService.SendMessageAsync(senderId, messageDto);&#10;                return Ok(new { success = true, data = result, message = &quot;Tin nhắn đã được gửi thành công&quot; });&#10;            }&#10;            catch (Exception ex)&#10;            {&#10;                return BadRequest(new { success = false, message = $&quot;Lỗi khi gửi tin nhắn: {ex.Message}&quot; });&#10;            }&#10;        }&#10;&#10;        /// &lt;summary&gt;&#10;        /// Lấy lịch sử cuộc trò chuyện với một người dùng cụ thể&#10;        /// &lt;/summary&gt;&#10;        [HttpGet(&quot;conversation/{otherUserId}&quot;)]&#10;        public async Task&lt;IActionResult&gt; GetConversationHistory(int otherUserId, [FromQuery] int page = 1, [FromQuery] int pageSize = 50)&#10;        {&#10;            try&#10;            {&#10;                var userId = GetCurrentUserId();&#10;                var messages = await _privateChatService.GetConversationHistoryAsync(userId, otherUserId, page, pageSize);&#10;                return Ok(new { success = true, data = messages, message = &quot;Lấy lịch sử cuộc trò chuyện thành công&quot; });&#10;            }&#10;            catch (Exception ex)&#10;            {&#10;                return BadRequest(new { success = false, message = $&quot;Lỗi khi lấy lịch sử cuộc trò chuyện: {ex.Message}&quot; });&#10;            }&#10;        }&#10;&#10;        /// &lt;summary&gt;&#10;        /// Lấy danh sách tất cả cuộc trò chuyện của người dùng&#10;        /// &lt;/summary&gt;&#10;        [HttpGet(&quot;conversations&quot;)]&#10;        public async Task&lt;IActionResult&gt; GetUserConversations()&#10;        {&#10;            try&#10;            {&#10;                var userId = GetCurrentUserId();&#10;                var conversations = await _privateChatService.GetUserConversationsAsync(userId);&#10;                return Ok(new { success = true, data = conversations, message = &quot;Lấy danh sách cuộc trò chuyện thành công&quot; });&#10;            }&#10;            catch (Exception ex)&#10;            {&#10;                return BadRequest(new { success = false, message = $&quot;Lỗi khi lấy danh sách cuộc trò chuyện: {ex.Message}&quot; });&#10;            }&#10;        }&#10;&#10;        /// &lt;summary&gt;&#10;        /// Đánh dấu tin nhắn đã đọc&#10;        /// &lt;/summary&gt;&#10;        [HttpPut(&quot;mark-read/{messageId}&quot;)]&#10;        public async Task&lt;IActionResult&gt; MarkMessageAsRead(int messageId)&#10;        {&#10;            try&#10;            {&#10;                var userId = GetCurrentUserId();&#10;                var success = await _privateChatService.MarkMessageAsReadAsync(messageId, userId);&#10;                &#10;                if (success)&#10;                {&#10;                    return Ok(new { success = true, message = &quot;Đã đánh dấu tin nhắn là đã đọc&quot; });&#10;                }&#10;                else&#10;                {&#10;                    return NotFound(new { success = false, message = &quot;Không tìm thấy tin nhắn hoặc tin nhắn đã được đọc&quot; });&#10;                }&#10;            }&#10;            catch (Exception ex)&#10;            {&#10;                return BadRequest(new { success = false, message = $&quot;Lỗi khi đánh dấu tin nhắn đã đọc: {ex.Message}&quot; });&#10;            }&#10;        }&#10;&#10;        /// &lt;summary&gt;&#10;        /// Đánh dấu tất cả tin nhắn trong cuộc trò chuyện đã đọc&#10;        /// &lt;/summary&gt;&#10;        [HttpPut(&quot;mark-conversation-read/{otherUserId}&quot;)]&#10;        public async Task&lt;IActionResult&gt; MarkConversationAsRead(int otherUserId)&#10;        {&#10;            try&#10;            {&#10;                var userId = GetCurrentUserId();&#10;                var success = await _privateChatService.MarkConversationAsReadAsync(userId, otherUserId);&#10;                &#10;                return Ok(new { success = true, message = &quot;Đã đánh dấu cuộc trò chuyện là đã đọc&quot;, hasUpdates = success });&#10;            }&#10;            catch (Exception ex)&#10;            {&#10;                return BadRequest(new { success = false, message = $&quot;Lỗi khi đánh dấu cuộc trò chuyện đã đọc: {ex.Message}&quot; });&#10;            }&#10;        }&#10;&#10;        /// &lt;summary&gt;&#10;        /// Lấy danh sách người dùng đang online&#10;        /// &lt;/summary&gt;&#10;        [HttpGet(&quot;online-users&quot;)]&#10;        public async Task&lt;IActionResult&gt; GetOnlineUsers()&#10;        {&#10;            try&#10;            {&#10;                var onlineUsers = await _privateChatService.GetOnlineUsersAsync();&#10;                return Ok(new { success = true, data = onlineUsers, message = &quot;Lấy danh sách người dùng online thành công&quot; });&#10;            }&#10;            catch (Exception ex)&#10;            {&#10;                return BadRequest(new { success = false, message = $&quot;Lỗi khi lấy danh sách người dùng online: {ex.Message}&quot; });&#10;            }&#10;        }&#10;&#10;        /// &lt;summary&gt;&#10;        /// Lấy trạng thái online của một người dùng cụ thể&#10;        /// &lt;/summary&gt;&#10;        [HttpGet(&quot;user-status/{userId}&quot;)]&#10;        public async Task&lt;IActionResult&gt; GetUserOnlineStatus(int userId)&#10;        {&#10;            try&#10;            {&#10;                var status = await _privateChatService.GetUserOnlineStatusAsync(userId);&#10;                &#10;                if (status != null)&#10;                {&#10;                    return Ok(new { success = true, data = status, message = &quot;Lấy trạng thái người dùng thành công&quot; });&#10;                }&#10;                else&#10;                {&#10;                    return NotFound(new { success = false, message = &quot;Không tìm thấy thông tin trạng thái người dùng&quot; });&#10;                }&#10;            }&#10;            catch (Exception ex)&#10;            {&#10;                return BadRequest(new { success = false, message = $&quot;Lỗi khi lấy trạng thái người dùng: {ex.Message}&quot; });&#10;            }&#10;        }&#10;&#10;        /// &lt;summary&gt;&#10;        /// Lấy số lượng tin nhắn chưa đọc&#10;        /// &lt;/summary&gt;&#10;        [HttpGet(&quot;unread-count&quot;)]&#10;        public async Task&lt;IActionResult&gt; GetUnreadMessageCount()&#10;        {&#10;            try&#10;            {&#10;                var userId = GetCurrentUserId();&#10;                var count = await _privateChatService.GetUnreadMessageCountAsync(userId);&#10;                return Ok(new { success = true, data = count, message = &quot;Lấy số lượng tin nhắn chưa đọc thành công&quot; });&#10;            }&#10;            catch (Exception ex)&#10;            {&#10;                return BadRequest(new { success = false, message = $&quot;Lỗi khi lấy số lượng tin nhắn chưa đọc: {ex.Message}&quot; });&#10;            }&#10;        }&#10;&#10;        /// &lt;summary&gt;&#10;        /// Lấy danh sách tin nhắn chưa đọc&#10;        /// &lt;/summary&gt;&#10;        [HttpGet(&quot;unread-messages&quot;)]&#10;        public async Task&lt;IActionResult&gt; GetUnreadMessages()&#10;        {&#10;            try&#10;            {&#10;                var userId = GetCurrentUserId();&#10;                var messages = await _privateChatService.GetUnreadMessagesAsync(userId);&#10;                return Ok(new { success = true, data = messages, message = &quot;Lấy danh sách tin nhắn chưa đọc thành công&quot; });&#10;            }&#10;            catch (Exception ex)&#10;            {&#10;                return BadRequest(new { success = false, message = $&quot;Lỗi khi lấy danh sách tin nhắn chưa đọc: {ex.Message}&quot; });&#10;            }&#10;        }&#10;&#10;        private int GetCurrentUserId()&#10;        {&#10;            var userIdClaim = User.FindFirst(ClaimTypes.NameIdentifier)?.Value;&#10;            if (int.TryParse(userIdClaim, out int userId))&#10;            {&#10;                return userId;&#10;            }&#10;            throw new UnauthorizedAccessException(&quot;Không thể xác định người dùng hiện tại&quot;);&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/DTOs/PrivateChat/ConversationDto.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/DTOs/PrivateChat/ConversationDto.cs" />
              <option name="updatedContent" value="namespace ISC_Project.DTOs.PrivateChat&#10;{&#10;    public class ConversationDto&#10;    {&#10;        public string ConversationId { get; set; } = string.Empty;&#10;        public int ParticipantId { get; set; }&#10;        public string ParticipantName { get; set; } = string.Empty;&#10;        public string LastMessage { get; set; } = string.Empty;&#10;        public DateTime LastMessageTime { get; set; }&#10;        public int UnreadCount { get; set; }&#10;        public bool IsOnline { get; set; }&#10;        public DateTime? LastSeen { get; set; }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/DTOs/PrivateChat/PrivateChatDto.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/DTOs/PrivateChat/PrivateChatDto.cs" />
              <option name="updatedContent" value="namespace ISC_Project.DTOs.PrivateChat&#10;{&#10;    public class PrivateChatDto&#10;    {&#10;        public int Id { get; set; }&#10;        public string ConversationId { get; set; } = string.Empty;&#10;        public int SenderId { get; set; }&#10;        public string SenderName { get; set; } = string.Empty;&#10;        public int ReceiverId { get; set; }&#10;        public string ReceiverName { get; set; } = string.Empty;&#10;        public string Message { get; set; } = string.Empty;&#10;        public DateTime SentAt { get; set; }&#10;        public bool IsRead { get; set; }&#10;        public DateTime? ReadAt { get; set; }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/DTOs/PrivateChat/SendMessageDto.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/DTOs/PrivateChat/SendMessageDto.cs" />
              <option name="updatedContent" value="using System.ComponentModel.DataAnnotations;&#10;&#10;namespace ISC_Project.DTOs.PrivateChat&#10;{&#10;    public class SendMessageDto&#10;    {&#10;        [Required]&#10;        public int ReceiverId { get; set; }&#10;&#10;        [Required]&#10;        [StringLength(1000)]&#10;        public string Message { get; set; } = string.Empty;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/DTOs/PrivateChat/UserOnlineStatusDto.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/DTOs/PrivateChat/UserOnlineStatusDto.cs" />
              <option name="updatedContent" value="namespace ISC_Project.DTOs.PrivateChat&#10;{&#10;    public class UserOnlineStatusDto&#10;    {&#10;        public int UserId { get; set; }&#10;        public string UserName { get; set; } = string.Empty;&#10;        public bool IsOnline { get; set; }&#10;        public DateTime? LastSeen { get; set; }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Hubs/PrivateChatHub.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Hubs/PrivateChatHub.cs" />
              <option name="updatedContent" value="using Microsoft.AspNetCore.SignalR;&#10;using Microsoft.AspNetCore.Authorization;&#10;using ISC_Project.Interface;&#10;using ISC_Project.DTOs.PrivateChat;&#10;using System.Security.Claims;&#10;&#10;namespace ISC_Project.Hubs&#10;{&#10;    [Authorize]&#10;    public class PrivateChatHub : Hub&#10;    {&#10;        private readonly IPrivateChatService _privateChatService;&#10;        private static readonly Dictionary&lt;int, HashSet&lt;string&gt;&gt; _userConnections = new();&#10;&#10;        public PrivateChatHub(IPrivateChatService privateChatService)&#10;        {&#10;            _privateChatService = privateChatService;&#10;        }&#10;&#10;        public override async Task OnConnectedAsync()&#10;        {&#10;            var userId = GetCurrentUserId();&#10;            if (userId &gt; 0)&#10;            {&#10;                // Thêm connection vào dictionary&#10;                lock (_userConnections)&#10;                {&#10;                    if (!_userConnections.ContainsKey(userId))&#10;                        _userConnections[userId] = new HashSet&lt;string&gt;();&#10;                    &#10;                    _userConnections[userId].Add(Context.ConnectionId);&#10;                }&#10;&#10;                // Cập nhật trạng thái online&#10;                await _privateChatService.UpdateUserOnlineStatusAsync(userId, Context.ConnectionId, true);&#10;                &#10;                // Thông báo cho tất cả clients về user online&#10;                await Clients.All.SendAsync(&quot;UserStatusChanged&quot;, new { UserId = userId, IsOnline = true });&#10;                &#10;                // Gửi danh sách tin nhắn chưa đọc cho user vừa kết nối&#10;                var unreadMessages = await _privateChatService.GetUnreadMessagesAsync(userId);&#10;                if (unreadMessages.Any())&#10;                {&#10;                    await Clients.Caller.SendAsync(&quot;UnreadMessages&quot;, unreadMessages);&#10;                }&#10;            }&#10;&#10;            await base.OnConnectedAsync();&#10;        }&#10;&#10;        public override async Task OnDisconnectedAsync(Exception? exception)&#10;        {&#10;            var userId = GetCurrentUserId();&#10;            if (userId &gt; 0)&#10;            {&#10;                // Xóa connection khỏi dictionary&#10;                lock (_userConnections)&#10;                {&#10;                    if (_userConnections.ContainsKey(userId))&#10;                    {&#10;                        _userConnections[userId].Remove(Context.ConnectionId);&#10;                        if (!_userConnections[userId].Any())&#10;                        {&#10;                            _userConnections.Remove(userId);&#10;                        }&#10;                    }&#10;                }&#10;&#10;                // Kiểm tra xem user còn connection nào khác không&#10;                bool isStillOnline;&#10;                lock (_userConnections)&#10;                {&#10;                    isStillOnline = _userConnections.ContainsKey(userId) &amp;&amp; _userConnections[userId].Any();&#10;                }&#10;&#10;                // Cập nhật trạng thái offline nếu không còn connection nào&#10;                if (!isStillOnline)&#10;                {&#10;                    await _privateChatService.UpdateUserOnlineStatusAsync(userId, Context.ConnectionId, false);&#10;                    await Clients.All.SendAsync(&quot;UserStatusChanged&quot;, new { UserId = userId, IsOnline = false });&#10;                }&#10;            }&#10;&#10;            await base.OnDisconnectedAsync(exception);&#10;        }&#10;&#10;        public async Task SendMessage(SendMessageDto messageDto)&#10;        {&#10;            var senderId = GetCurrentUserId();&#10;            if (senderId &lt;= 0) return;&#10;&#10;            try&#10;            {&#10;                // Lưu tin nhắn vào database&#10;                var savedMessage = await _privateChatService.SendMessageAsync(senderId, messageDto);&#10;&#10;                // Gửi tin nhắn đến người nhận (nếu đang online)&#10;                var receiverConnectionIds = GetUserConnections(messageDto.ReceiverId);&#10;                if (receiverConnectionIds.Any())&#10;                {&#10;                    await Clients.Clients(receiverConnectionIds).SendAsync(&quot;ReceiveMessage&quot;, savedMessage);&#10;                }&#10;&#10;                // Gửi xác nhận về cho người gửi&#10;                await Clients.Caller.SendAsync(&quot;MessageSent&quot;, savedMessage);&#10;&#10;                // Thông báo về tin nhắn mới cho người nhận (để cập nhật badge số lượng)&#10;                if (receiverConnectionIds.Any())&#10;                {&#10;                    var unreadCount = await _privateChatService.GetUnreadMessageCountAsync(messageDto.ReceiverId);&#10;                    await Clients.Clients(receiverConnectionIds).SendAsync(&quot;UnreadCountUpdated&quot;, unreadCount);&#10;                }&#10;            }&#10;            catch (Exception ex)&#10;            {&#10;                await Clients.Caller.SendAsync(&quot;Error&quot;, $&quot;Không thể gửi tin nhắn: {ex.Message}&quot;);&#10;            }&#10;        }&#10;&#10;        public async Task MarkMessageAsRead(int messageId)&#10;        {&#10;            var userId = GetCurrentUserId();&#10;            if (userId &lt;= 0) return;&#10;&#10;            try&#10;            {&#10;                var success = await _privateChatService.MarkMessageAsReadAsync(messageId, userId);&#10;                if (success)&#10;                {&#10;                    await Clients.Caller.SendAsync(&quot;MessageMarkedAsRead&quot;, messageId);&#10;                    &#10;                    // Cập nhật số lượng tin nhắn chưa đọc&#10;                    var unreadCount = await _privateChatService.GetUnreadMessageCountAsync(userId);&#10;                    await Clients.Caller.SendAsync(&quot;UnreadCountUpdated&quot;, unreadCount);&#10;                }&#10;            }&#10;            catch (Exception ex)&#10;            {&#10;                await Clients.Caller.SendAsync(&quot;Error&quot;, $&quot;Không thể đánh dấu tin nhắn đã đọc: {ex.Message}&quot;);&#10;            }&#10;        }&#10;&#10;        public async Task MarkConversationAsRead(int otherUserId)&#10;        {&#10;            var userId = GetCurrentUserId();&#10;            if (userId &lt;= 0) return;&#10;&#10;            try&#10;            {&#10;                var success = await _privateChatService.MarkConversationAsReadAsync(userId, otherUserId);&#10;                if (success)&#10;                {&#10;                    await Clients.Caller.SendAsync(&quot;ConversationMarkedAsRead&quot;, otherUserId);&#10;                    &#10;                    // Cập nhật số lượng tin nhắn chưa đọc&#10;                    var unreadCount = await _privateChatService.GetUnreadMessageCountAsync(userId);&#10;                    await Clients.Caller.SendAsync(&quot;UnreadCountUpdated&quot;, unreadCount);&#10;                }&#10;            }&#10;            catch (Exception ex)&#10;            {&#10;                await Clients.Caller.SendAsync(&quot;Error&quot;, $&quot;Không thể đánh dấu cuộc trò chuyện đã đọc: {ex.Message}&quot;);&#10;            }&#10;        }&#10;&#10;        public async Task JoinConversation(string conversationId)&#10;        {&#10;            await Groups.AddToGroupAsync(Context.ConnectionId, $&quot;Conversation_{conversationId}&quot;);&#10;        }&#10;&#10;        public async Task LeaveConversation(string conversationId)&#10;        {&#10;            await Groups.RemoveFromGroupAsync(Context.ConnectionId, $&quot;Conversation_{conversationId}&quot;);&#10;        }&#10;&#10;        public async Task GetOnlineUsers()&#10;        {&#10;            try&#10;            {&#10;                var onlineUsers = await _privateChatService.GetOnlineUsersAsync();&#10;                await Clients.Caller.SendAsync(&quot;OnlineUsers&quot;, onlineUsers);&#10;            }&#10;            catch (Exception ex)&#10;            {&#10;                await Clients.Caller.SendAsync(&quot;Error&quot;, $&quot;Không thể lấy danh sách người dùng online: {ex.Message}&quot;);&#10;            }&#10;        }&#10;&#10;        public async Task StartTyping(int receiverId)&#10;        {&#10;            var senderId = GetCurrentUserId();&#10;            if (senderId &lt;= 0) return;&#10;&#10;            var receiverConnectionIds = GetUserConnections(receiverId);&#10;            if (receiverConnectionIds.Any())&#10;            {&#10;                await Clients.Clients(receiverConnectionIds).SendAsync(&quot;UserStartedTyping&quot;, senderId);&#10;            }&#10;        }&#10;&#10;        public async Task StopTyping(int receiverId)&#10;        {&#10;            var senderId = GetCurrentUserId();&#10;            if (senderId &lt;= 0) return;&#10;&#10;            var receiverConnectionIds = GetUserConnections(receiverId);&#10;            if (receiverConnectionIds.Any())&#10;            {&#10;                await Clients.Clients(receiverConnectionIds).SendAsync(&quot;UserStoppedTyping&quot;, senderId);&#10;            }&#10;        }&#10;&#10;        private int GetCurrentUserId()&#10;        {&#10;            var userIdClaim = Context.User?.FindFirst(ClaimTypes.NameIdentifier)?.Value;&#10;            if (int.TryParse(userIdClaim, out int userId))&#10;            {&#10;                return userId;&#10;            }&#10;            return 0;&#10;        }&#10;&#10;        private List&lt;string&gt; GetUserConnections(int userId)&#10;        {&#10;            lock (_userConnections)&#10;            {&#10;                return _userConnections.ContainsKey(userId) &#10;                    ? _userConnections[userId].ToList() &#10;                    : new List&lt;string&gt;();&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Interface/IPrivateChatService.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Interface/IPrivateChatService.cs" />
              <option name="updatedContent" value="using ISC_Project.DTOs.PrivateChat;&#10;&#10;namespace ISC_Project.Interface&#10;{&#10;    public interface IPrivateChatService&#10;    {&#10;        Task&lt;PrivateChatDto&gt; SendMessageAsync(int senderId, SendMessageDto messageDto);&#10;        Task&lt;List&lt;PrivateChatDto&gt;&gt; GetConversationHistoryAsync(int userId, int otherUserId, int page = 1, int pageSize = 50);&#10;        Task&lt;List&lt;ConversationDto&gt;&gt; GetUserConversationsAsync(int userId);&#10;        Task&lt;bool&gt; MarkMessageAsReadAsync(int messageId, int userId);&#10;        Task&lt;bool&gt; MarkConversationAsReadAsync(int userId, int otherUserId);&#10;        Task&lt;List&lt;UserOnlineStatusDto&gt;&gt; GetOnlineUsersAsync();&#10;        Task&lt;UserOnlineStatusDto?&gt; GetUserOnlineStatusAsync(int userId);&#10;        Task UpdateUserOnlineStatusAsync(int userId, string connectionId, bool isOnline);&#10;        Task&lt;int&gt; GetUnreadMessageCountAsync(int userId);&#10;        Task&lt;List&lt;PrivateChatDto&gt;&gt; GetUnreadMessagesAsync(int userId);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Models/PrivateChat.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Models/PrivateChat.cs" />
              <option name="updatedContent" value="using System.ComponentModel.DataAnnotations;&#10;using System.ComponentModel.DataAnnotations.Schema;&#10;&#10;namespace ISC_Project.Models&#10;{&#10;    public class PrivateChat&#10;    {&#10;        [Key]&#10;        public int Id { get; set; }&#10;&#10;        [Required]&#10;        public string ConversationId { get; set; } = Guid.NewGuid().ToString();&#10;&#10;        [Required]&#10;        public int SenderId { get; set; }&#10;&#10;        [Required]&#10;        public int ReceiverId { get; set; }&#10;&#10;        [Required]&#10;        [StringLength(1000)]&#10;        public string Message { get; set; } = string.Empty;&#10;&#10;        public DateTime SentAt { get; set; } = DateTime.UtcNow;&#10;&#10;        public bool IsRead { get; set; } = false;&#10;&#10;        public DateTime? ReadAt { get; set; }&#10;&#10;        public bool IsDeleted { get; set; } = false;&#10;&#10;        // Navigation properties&#10;        [ForeignKey(&quot;SenderId&quot;)]&#10;        public virtual User? Sender { get; set; }&#10;&#10;        [ForeignKey(&quot;ReceiverId&quot;)]&#10;        public virtual User? Receiver { get; set; }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Models/UserOnlineStatus.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Models/UserOnlineStatus.cs" />
              <option name="updatedContent" value="using System.ComponentModel.DataAnnotations;&#10;using System.ComponentModel.DataAnnotations.Schema;&#10;&#10;namespace ISC_Project.Models&#10;{&#10;    public class UserOnlineStatus&#10;    {&#10;        [Key]&#10;        public int Id { get; set; }&#10;&#10;        [Required]&#10;        public int UserId { get; set; }&#10;&#10;        [Required]&#10;        public string ConnectionId { get; set; } = string.Empty;&#10;&#10;        public bool IsOnline { get; set; } = true;&#10;&#10;        public DateTime LastSeen { get; set; } = DateTime.UtcNow;&#10;&#10;        public DateTime ConnectedAt { get; set; } = DateTime.UtcNow;&#10;&#10;        // Navigation property&#10;        [ForeignKey(&quot;UserId&quot;)]&#10;        public virtual User? User { get; set; }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Services/PrivateChatService.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Services/PrivateChatService.cs" />
              <option name="updatedContent" value="using ISC_Project.Data;&#10;using ISC_Project.DTOs.PrivateChat;&#10;using ISC_Project.Interface;&#10;using ISC_Project.Models;&#10;using Microsoft.EntityFrameworkCore;&#10;&#10;namespace ISC_Project.Services&#10;{&#10;    public class PrivateChatService : IPrivateChatService&#10;    {&#10;        private readonly ISC_ProjectDbContext _context;&#10;&#10;        public PrivateChatService(ISC_ProjectDbContext context)&#10;        {&#10;            _context = context;&#10;        }&#10;&#10;        public async Task&lt;PrivateChatDto&gt; SendMessageAsync(int senderId, SendMessageDto messageDto)&#10;        {&#10;            // Tạo conversationId duy nhất cho cặp người dùng&#10;            var participants = new[] { senderId, messageDto.ReceiverId }.OrderBy(x =&gt; x).ToArray();&#10;            var conversationId = $&quot;{participants[0]}_{participants[1]}&quot;;&#10;&#10;            var privateChat = new PrivateChat&#10;            {&#10;                ConversationId = conversationId,&#10;                SenderId = senderId,&#10;                ReceiverId = messageDto.ReceiverId,&#10;                Message = messageDto.Message,&#10;                SentAt = DateTime.UtcNow,&#10;                IsRead = false&#10;            };&#10;&#10;            _context.PrivateChats.Add(privateChat);&#10;            await _context.SaveChangesAsync();&#10;&#10;            return await GetChatDtoAsync(privateChat);&#10;        }&#10;&#10;        public async Task&lt;List&lt;PrivateChatDto&gt;&gt; GetConversationHistoryAsync(int userId, int otherUserId, int page = 1, int pageSize = 50)&#10;        {&#10;            var participants = new[] { userId, otherUserId }.OrderBy(x =&gt; x).ToArray();&#10;            var conversationId = $&quot;{participants[0]}_{participants[1]}&quot;;&#10;&#10;            var messages = await _context.PrivateChats&#10;                .Include(pc =&gt; pc.Sender)&#10;                .Include(pc =&gt; pc.Receiver)&#10;                .Where(pc =&gt; pc.ConversationId == conversationId &amp;&amp; !pc.IsDeleted)&#10;                .OrderByDescending(pc =&gt; pc.SentAt)&#10;                .Skip((page - 1) * pageSize)&#10;                .Take(pageSize)&#10;                .Select(pc =&gt; new PrivateChatDto&#10;                {&#10;                    Id = pc.Id,&#10;                    ConversationId = pc.ConversationId,&#10;                    SenderId = pc.SenderId,&#10;                    SenderName = pc.Sender!.FullName ?? pc.Sender.UserName ?? &quot;Unknown&quot;,&#10;                    ReceiverId = pc.ReceiverId,&#10;                    ReceiverName = pc.Receiver!.FullName ?? pc.Receiver.UserName ?? &quot;Unknown&quot;,&#10;                    Message = pc.Message,&#10;                    SentAt = pc.SentAt,&#10;                    IsRead = pc.IsRead,&#10;                    ReadAt = pc.ReadAt&#10;                })&#10;                .ToListAsync();&#10;&#10;            return messages.OrderBy(m =&gt; m.SentAt).ToList();&#10;        }&#10;&#10;        public async Task&lt;List&lt;ConversationDto&gt;&gt; GetUserConversationsAsync(int userId)&#10;        {&#10;            var conversations = await _context.PrivateChats&#10;                .Include(pc =&gt; pc.Sender)&#10;                .Include(pc =&gt; pc.Receiver)&#10;                .Where(pc =&gt; (pc.SenderId == userId || pc.ReceiverId == userId) &amp;&amp; !pc.IsDeleted)&#10;                .GroupBy(pc =&gt; pc.ConversationId)&#10;                .Select(g =&gt; new&#10;                {&#10;                    ConversationId = g.Key,&#10;                    LastMessage = g.OrderByDescending(pc =&gt; pc.SentAt).First(),&#10;                    UnreadCount = g.Count(pc =&gt; pc.ReceiverId == userId &amp;&amp; !pc.IsRead)&#10;                })&#10;                .ToListAsync();&#10;&#10;            var conversationDtos = new List&lt;ConversationDto&gt;();&#10;&#10;            foreach (var conv in conversations)&#10;            {&#10;                var otherUserId = conv.LastMessage.SenderId == userId &#10;                    ? conv.LastMessage.ReceiverId &#10;                    : conv.LastMessage.SenderId;&#10;&#10;                var otherUser = await _context.Users.FindAsync(otherUserId);&#10;                var onlineStatus = await _context.UserOnlineStatuses&#10;                    .Where(uos =&gt; uos.UserId == otherUserId)&#10;                    .OrderByDescending(uos =&gt; uos.ConnectedAt)&#10;                    .FirstOrDefaultAsync();&#10;&#10;                conversationDtos.Add(new ConversationDto&#10;                {&#10;                    ConversationId = conv.ConversationId,&#10;                    ParticipantId = otherUserId,&#10;                    ParticipantName = otherUser?.FullName ?? otherUser?.UserName ?? &quot;Unknown&quot;,&#10;                    LastMessage = conv.LastMessage.Message,&#10;                    LastMessageTime = conv.LastMessage.SentAt,&#10;                    UnreadCount = conv.UnreadCount,&#10;                    IsOnline = onlineStatus?.IsOnline ?? false,&#10;                    LastSeen = onlineStatus?.LastSeen&#10;                });&#10;            }&#10;&#10;            return conversationDtos.OrderByDescending(c =&gt; c.LastMessageTime).ToList();&#10;        }&#10;&#10;        public async Task&lt;bool&gt; MarkMessageAsReadAsync(int messageId, int userId)&#10;        {&#10;            var message = await _context.PrivateChats&#10;                .FirstOrDefaultAsync(pc =&gt; pc.Id == messageId &amp;&amp; pc.ReceiverId == userId);&#10;&#10;            if (message == null || message.IsRead) return false;&#10;&#10;            message.IsRead = true;&#10;            message.ReadAt = DateTime.UtcNow;&#10;&#10;            await _context.SaveChangesAsync();&#10;            return true;&#10;        }&#10;&#10;        public async Task&lt;bool&gt; MarkConversationAsReadAsync(int userId, int otherUserId)&#10;        {&#10;            var participants = new[] { userId, otherUserId }.OrderBy(x =&gt; x).ToArray();&#10;            var conversationId = $&quot;{participants[0]}_{participants[1]}&quot;;&#10;&#10;            var unreadMessages = await _context.PrivateChats&#10;                .Where(pc =&gt; pc.ConversationId == conversationId &amp;&amp; &#10;                           pc.ReceiverId == userId &amp;&amp; &#10;                           !pc.IsRead)&#10;                .ToListAsync();&#10;&#10;            foreach (var message in unreadMessages)&#10;            {&#10;                message.IsRead = true;&#10;                message.ReadAt = DateTime.UtcNow;&#10;            }&#10;&#10;            await _context.SaveChangesAsync();&#10;            return unreadMessages.Any();&#10;        }&#10;&#10;        public async Task&lt;List&lt;UserOnlineStatusDto&gt;&gt; GetOnlineUsersAsync()&#10;        {&#10;            var onlineUsers = await _context.UserOnlineStatuses&#10;                .Include(uos =&gt; uos.User)&#10;                .Where(uos =&gt; uos.IsOnline)&#10;                .GroupBy(uos =&gt; uos.UserId)&#10;                .Select(g =&gt; g.OrderByDescending(uos =&gt; uos.ConnectedAt).First())&#10;                .Select(uos =&gt; new UserOnlineStatusDto&#10;                {&#10;                    UserId = uos.UserId,&#10;                    UserName = uos.User!.FullName ?? uos.User.UserName ?? &quot;Unknown&quot;,&#10;                    IsOnline = uos.IsOnline,&#10;                    LastSeen = uos.LastSeen&#10;                })&#10;                .ToListAsync();&#10;&#10;            return onlineUsers;&#10;        }&#10;&#10;        public async Task&lt;UserOnlineStatusDto?&gt; GetUserOnlineStatusAsync(int userId)&#10;        {&#10;            var status = await _context.UserOnlineStatuses&#10;                .Include(uos =&gt; uos.User)&#10;                .Where(uos =&gt; uos.UserId == userId)&#10;                .OrderByDescending(uos =&gt; uos.ConnectedAt)&#10;                .FirstOrDefaultAsync();&#10;&#10;            if (status == null) return null;&#10;&#10;            return new UserOnlineStatusDto&#10;            {&#10;                UserId = status.UserId,&#10;                UserName = status.User!.FullName ?? status.User.UserName ?? &quot;Unknown&quot;,&#10;                IsOnline = status.IsOnline,&#10;                LastSeen = status.LastSeen&#10;            };&#10;        }&#10;&#10;        public async Task UpdateUserOnlineStatusAsync(int userId, string connectionId, bool isOnline)&#10;        {&#10;            var existingStatus = await _context.UserOnlineStatuses&#10;                .FirstOrDefaultAsync(uos =&gt; uos.UserId == userId &amp;&amp; uos.ConnectionId == connectionId);&#10;&#10;            if (existingStatus != null)&#10;            {&#10;                existingStatus.IsOnline = isOnline;&#10;                existingStatus.LastSeen = DateTime.UtcNow;&#10;            }&#10;            else&#10;            {&#10;                var newStatus = new UserOnlineStatus&#10;                {&#10;                    UserId = userId,&#10;                    ConnectionId = connectionId,&#10;                    IsOnline = isOnline,&#10;                    LastSeen = DateTime.UtcNow,&#10;                    ConnectedAt = DateTime.UtcNow&#10;                };&#10;                _context.UserOnlineStatuses.Add(newStatus);&#10;            }&#10;&#10;            // Đánh dấu tất cả connection khác của user này là offline&#10;            if (!isOnline)&#10;            {&#10;                var otherConnections = await _context.UserOnlineStatuses&#10;                    .Where(uos =&gt; uos.UserId == userId &amp;&amp; uos.ConnectionId != connectionId)&#10;                    .ToListAsync();&#10;&#10;                foreach (var conn in otherConnections)&#10;                {&#10;                    conn.IsOnline = false;&#10;                    conn.LastSeen = DateTime.UtcNow;&#10;                }&#10;            }&#10;&#10;            await _context.SaveChangesAsync();&#10;        }&#10;&#10;        public async Task&lt;int&gt; GetUnreadMessageCountAsync(int userId)&#10;        {&#10;            return await _context.PrivateChats&#10;                .CountAsync(pc =&gt; pc.ReceiverId == userId &amp;&amp; !pc.IsRead &amp;&amp; !pc.IsDeleted);&#10;        }&#10;&#10;        public async Task&lt;List&lt;PrivateChatDto&gt;&gt; GetUnreadMessagesAsync(int userId)&#10;        {&#10;            var unreadMessages = await _context.PrivateChats&#10;                .Include(pc =&gt; pc.Sender)&#10;                .Include(pc =&gt; pc.Receiver)&#10;                .Where(pc =&gt; pc.ReceiverId == userId &amp;&amp; !pc.IsRead &amp;&amp; !pc.IsDeleted)&#10;                .OrderBy(pc =&gt; pc.SentAt)&#10;                .Select(pc =&gt; new PrivateChatDto&#10;                {&#10;                    Id = pc.Id,&#10;                    ConversationId = pc.ConversationId,&#10;                    SenderId = pc.SenderId,&#10;                    SenderName = pc.Sender!.FullName ?? pc.Sender.UserName ?? &quot;Unknown&quot;,&#10;                    ReceiverId = pc.ReceiverId,&#10;                    ReceiverName = pc.Receiver!.FullName ?? pc.Receiver.UserName ?? &quot;Unknown&quot;,&#10;                    Message = pc.Message,&#10;                    SentAt = pc.SentAt,&#10;                    IsRead = pc.IsRead,&#10;                    ReadAt = pc.ReadAt&#10;                })&#10;                .ToListAsync();&#10;&#10;            return unreadMessages;&#10;        }&#10;&#10;        private async Task&lt;PrivateChatDto&gt; GetChatDtoAsync(PrivateChat privateChat)&#10;        {&#10;            var sender = await _context.Users.FindAsync(privateChat.SenderId);&#10;            var receiver = await _context.Users.FindAsync(privateChat.ReceiverId);&#10;&#10;            return new PrivateChatDto&#10;            {&#10;                Id = privateChat.Id,&#10;                ConversationId = privateChat.ConversationId,&#10;                SenderId = privateChat.SenderId,&#10;                SenderName = sender?.FullName ?? sender?.UserName ?? &quot;Unknown&quot;,&#10;                ReceiverId = privateChat.ReceiverId,&#10;                ReceiverName = receiver?.FullName ?? receiver?.UserName ?? &quot;Unknown&quot;,&#10;                Message = privateChat.Message,&#10;                SentAt = privateChat.SentAt,&#10;                IsRead = privateChat.IsRead,&#10;                ReadAt = privateChat.ReadAt&#10;            };&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>