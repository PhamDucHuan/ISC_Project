// <auto-generated />
using System;
using ISC_Project.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ISC_Project.Migrations
{
    [DbContext(typeof(ISC_ProjectDbContext))]
    partial class ISC_ProjectDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.36")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ISC_Project.Models.AcceptingSchoolTransfer", b =>
                {
                    b.Property<int>("AcceptingSchoolTransfersId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("AcceptingSchoolTransfers_ID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("AcceptingSchoolTransfersId"));

                    b.Property<string>("ConvertFrom")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("Convert from");

                    b.Property<string>("District")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("FileUrl")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)")
                        .HasColumnName("FileURL");

                    b.Property<DateTime?>("MoveInDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("Move-in Date");

                    b.Property<string>("Province")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Reason")
                        .HasColumnType("text");

                    b.Property<int?>("SchoolYearId")
                        .HasColumnType("integer")
                        .HasColumnName("SchoolYear_ID");

                    b.Property<int?>("SemesterMoveIn")
                        .HasColumnType("integer");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("User_ID");

                    b.HasKey("AcceptingSchoolTransfersId")
                        .HasName("AcceptingSchoolTransfers_pkey");

                    b.HasIndex("UserId");

                    b.ToTable("AcceptingSchoolTransfers", "ISC_Project");
                });

            modelBuilder.Entity("ISC_Project.Models.AssessmentPart", b =>
                {
                    b.Property<int>("AssessmentPartsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("AssessmentParts_ID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("AssessmentPartsId"));

                    b.Property<int?>("AssignmentId")
                        .HasColumnType("integer")
                        .HasColumnName("Assignment_ID");

                    b.Property<string>("AssignmentUrl")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)")
                        .HasColumnName("Assignment_url");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("PartOrder")
                        .HasColumnType("integer")
                        .HasColumnName("Part_order");

                    b.Property<DateTime?>("StarTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Title")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("AssessmentPartsId")
                        .HasName("AssessmentParts_pkey");

                    b.HasIndex("AssignmentId");

                    b.ToTable("AssessmentParts", "ISC_Project");
                });

            modelBuilder.Entity("ISC_Project.Models.AssessmentQuestion", b =>
                {
                    b.Property<int>("AssessmentQuestionsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("AssessmentQuestions_ID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("AssessmentQuestionsId"));

                    b.Property<int?>("QuestionOrder")
                        .HasColumnType("integer")
                        .HasColumnName("Question_order");

                    b.Property<int?>("QuestionsId")
                        .HasColumnType("integer")
                        .HasColumnName("Questions_ID");

                    b.HasKey("AssessmentQuestionsId")
                        .HasName("AssessmentQuestions_pkey");

                    b.HasIndex("QuestionsId");

                    b.ToTable("AssessmentQuestions", "ISC_Project");
                });

            modelBuilder.Entity("ISC_Project.Models.Assignment", b =>
                {
                    b.Property<int>("AssignmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Assignment_ID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("AssignmentId"));

                    b.Property<string>("AssignmentScope")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("Assignment_scope");

                    b.Property<string>("AssignmentUrl")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)")
                        .HasColumnName("Assignment_Url");

                    b.Property<string>("Category")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("CraeteAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("FacultyId")
                        .HasColumnType("integer")
                        .HasColumnName("Faculty_ID");

                    b.Property<string>("Format")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("PartitionType")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("StarTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Status")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int?>("TeachingId")
                        .HasColumnType("integer")
                        .HasColumnName("Teaching_ID");

                    b.Property<string>("Title")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("AssignmentId");

                    b.HasIndex("TeachingId");

                    b.ToTable("Assignments", "ISC_Project");
                });

            modelBuilder.Entity("ISC_Project.Models.AssignmentGroup", b =>
                {
                    b.Property<int?>("AssignmentsId")
                        .HasColumnType("integer")
                        .HasColumnName("Assignments_ID");

                    b.Property<int?>("ClassId")
                        .HasColumnType("integer")
                        .HasColumnName("Class_ID");

                    b.HasIndex("AssignmentsId");

                    b.HasIndex("ClassId");

                    b.ToTable("Assignment_Group", "ISC_Project");
                });

            modelBuilder.Entity("ISC_Project.Models.Campus", b =>
                {
                    b.Property<int>("CampusesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Campuses_ID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CampusesId"));

                    b.Property<string>("Address")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("ManagerName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("Manager_name");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("phone_number");

                    b.Property<int?>("SchoolId")
                        .HasColumnType("integer")
                        .HasColumnName("School_ID");

                    b.HasKey("CampusesId")
                        .HasName("Campuses_pkey");

                    b.HasIndex("SchoolId");

                    b.ToTable("Campuses", "ISC_Project");
                });

            modelBuilder.Entity("ISC_Project.Models.ChatConversation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ConversationId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ConversationTitle")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LastMessageTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("ChatConversations");
                });

            modelBuilder.Entity("ISC_Project.Models.ChatMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ConversationId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsFromUser")
                        .HasColumnType("boolean");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("ConversationId");

                    b.ToTable("ChatMessages");
                });

            modelBuilder.Entity("ISC_Project.Models.Class", b =>
                {
                    b.Property<int>("ClassId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Class_ID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ClassId"));

                    b.Property<string>("ClassCode")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("ClassName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("ClassPassword")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int?>("ClassTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("ClassType_ID");

                    b.Property<string>("ClassUrl")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)")
                        .HasColumnName("ClassURL");

                    b.Property<string>("Classification")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("integer")
                        .HasColumnName("Department_ID");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("FileClassUrl")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)")
                        .HasColumnName("FileClassURL");

                    b.Property<string>("JoinCode")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("Join_code");

                    b.Property<string>("JoinPassword")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("Join_password");

                    b.Property<int?>("NumberOfSessions")
                        .HasColumnType("integer")
                        .HasColumnName("Number of sessions");

                    b.Property<int?>("SchoolYearId")
                        .HasColumnType("integer")
                        .HasColumnName("SchoolYear_ID");

                    b.Property<DateTime?>("StarTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Status")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int?>("StudentNumber")
                        .HasColumnType("integer");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("User_ID");

                    b.HasKey("ClassId");

                    b.HasIndex("ClassTypeId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("UserId");

                    b.ToTable("Class", "ISC_Project");
                });

            modelBuilder.Entity("ISC_Project.Models.ClassDetail", b =>
                {
                    b.Property<int>("DetailClassId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Detail_Class_ID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("DetailClassId"));

                    b.Property<DateTime?>("AdmissionDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("Admission date");

                    b.Property<int?>("ClassId")
                        .HasColumnType("integer")
                        .HasColumnName("Class_ID");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("integer")
                        .HasColumnName("Department_ID");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int?>("NumberOfSubjects")
                        .HasColumnType("integer");

                    b.Property<int?>("SchoolYearId")
                        .HasColumnType("integer")
                        .HasColumnName("SchoolYear_ID");

                    b.Property<string>("Status")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int?>("StudentId")
                        .HasColumnType("integer")
                        .HasColumnName("Student_ID");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("User_ID");

                    b.HasKey("DetailClassId")
                        .HasName("Class_Detail_pkey");

                    b.HasIndex("ClassId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("UserId");

                    b.ToTable("Class_Detail", "ISC_Project");
                });

            modelBuilder.Entity("ISC_Project.Models.ClassHistory", b =>
                {
                    b.Property<int>("HistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("History_ID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("HistoryId"));

                    b.Property<int?>("ClassId")
                        .HasColumnType("integer")
                        .HasColumnName("Class_ID");

                    b.Property<string>("Decription")
                        .HasColumnType("text");

                    b.Property<int?>("SubjectId")
                        .HasColumnType("integer")
                        .HasColumnName("Subject_ID");

                    b.Property<int?>("TotalSessisons")
                        .HasColumnType("integer");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("User_ID");

                    b.HasKey("HistoryId")
                        .HasName("ClassHistory_pkey");

                    b.HasIndex("ClassId");

                    b.ToTable("ClassHistory", "ISC_Project");
                });

            modelBuilder.Entity("ISC_Project.Models.ClassHistorySession", b =>
                {
                    b.Property<int>("SessisonHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("SessisonHistory_ID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SessisonHistoryId"));

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("HistoryId")
                        .HasColumnType("integer")
                        .HasColumnName("History_ID");

                    b.Property<string>("SessisonTotal")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime?>("StarTime")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("SessisonHistoryId")
                        .HasName("ClassHistorySession_pkey");

                    b.HasIndex("HistoryId");

                    b.ToTable("ClassHistorySession", "ISC_Project");
                });

            modelBuilder.Entity("ISC_Project.Models.ClassroomSetting", b =>
                {
                    b.Property<int>("ClassroomSettingsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("ClassroomSettings_ID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ClassroomSettingsId"));

                    b.Property<int?>("ClassId")
                        .HasColumnType("integer")
                        .HasColumnName("Class_ID");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("ClassroomSettingsId")
                        .HasName("ClassroomSettings_pkey");

                    b.HasIndex("ClassId");

                    b.ToTable("ClassroomSettings", "ISC_Project");
                });

            modelBuilder.Entity("ISC_Project.Models.ClassSession", b =>
                {
                    b.Property<int>("SessionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Session_ID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SessionId"));

                    b.Property<bool?>("AllowSharing")
                        .HasColumnType("boolean");

                    b.Property<bool?>("AutoStart")
                        .HasColumnType("boolean");

                    b.Property<int?>("ClassId")
                        .HasColumnType("integer")
                        .HasColumnName("Class_ID");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int?>("DurationHours")
                        .HasColumnType("integer")
                        .HasColumnName("Duration_hours");

                    b.Property<int?>("DurationMinutes")
                        .HasColumnType("integer")
                        .HasColumnName("Duration_minutes");

                    b.Property<bool?>("EnableRecording")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("EndTimestamp")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("EndTIMESTAMP");

                    b.Property<bool?>("IsPrivate")
                        .HasColumnType("boolean");

                    b.Property<string>("ShareLink")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<DateTime?>("StartTimestamp")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("StartTIMESTAMP");

                    b.Property<string>("Topic")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("User_ID");

                    b.HasKey("SessionId")
                        .HasName("ClassSessions_pkey");

                    b.HasIndex("ClassId");

                    b.HasIndex("UserId");

                    b.ToTable("ClassSessions", "ISC_Project");
                });

            modelBuilder.Entity("ISC_Project.Models.ClassType", b =>
                {
                    b.Property<int>("ClassTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("ClassType_ID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ClassTypeId"));

                    b.Property<string>("ClassTypeName")
                        .HasColumnType("text");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<bool?>("Status")
                        .HasColumnType("boolean");

                    b.HasKey("ClassTypeId");

                    b.ToTable("ClassType", "ISC_Project");
                });

            modelBuilder.Entity("ISC_Project.Models.Course", b =>
                {
                    b.Property<int>("CoursesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Courses_ID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CoursesId"));

                    b.Property<int?>("CourseCategoriesId")
                        .HasColumnType("integer")
                        .HasColumnName("CourseCategories_ID");

                    b.Property<string>("CoursesImageUrl")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)")
                        .HasColumnName("Courses_image_url");

                    b.Property<decimal?>("DefaultPrice")
                        .HasPrecision(12, 2)
                        .HasColumnType("numeric(12,2)")
                        .HasColumnName("Default_price");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Syllabus")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("CoursesId")
                        .HasName("Courses_pkey");

                    b.HasIndex("CourseCategoriesId");

                    b.ToTable("Courses", "ISC_Project");
                });

            modelBuilder.Entity("ISC_Project.Models.CourseCategory", b =>
                {
                    b.Property<int>("CourseCategoriesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("CourseCategories_ID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CourseCategoriesId"));

                    b.Property<string>("CourseCategoriesName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.HasKey("CourseCategoriesId")
                        .HasName("CourseCategories_pkey");

                    b.ToTable("CourseCategories", "ISC_Project");
                });

            modelBuilder.Entity("ISC_Project.Models.CourseLesson", b =>
                {
                    b.Property<int>("CourseLessonsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("CourseLessons_ID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CourseLessonsId"));

                    b.Property<int?>("CourseOfferingsId")
                        .HasColumnType("integer")
                        .HasColumnName("CourseOfferings_ID");

                    b.Property<DateTime?>("LessonTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("RoomNumber")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int?>("SchoolId")
                        .HasColumnType("integer")
                        .HasColumnName("School_ID");

                    b.Property<string>("Status")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.HasKey("CourseLessonsId")
                        .HasName("CourseLessons_pkey");

                    b.HasIndex("CourseOfferingsId");

                    b.HasIndex("SchoolId");

                    b.ToTable("CourseLessons", "ISC_Project");
                });

            modelBuilder.Entity("ISC_Project.Models.CourseOffering", b =>
                {
                    b.Property<int>("CourseOfferingsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("CourseOfferings_ID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CourseOfferingsId"));

                    b.Property<int?>("CoursesId")
                        .HasColumnType("integer")
                        .HasColumnName("Courses_ID");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("InstructorUserId")
                        .HasColumnType("integer")
                        .HasColumnName("Instructor_user_id");

                    b.Property<int?>("MaxStudent")
                        .HasColumnType("integer");

                    b.Property<decimal?>("Price")
                        .HasPrecision(12, 2)
                        .HasColumnType("numeric(12,2)");

                    b.Property<DateTime?>("StarTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Status")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("CourseOfferingsId")
                        .HasName("CourseOfferings_pkey");

                    b.HasIndex("CoursesId");

                    b.HasIndex("InstructorUserId");

                    b.ToTable("CourseOfferings", "ISC_Project");
                });

            modelBuilder.Entity("ISC_Project.Models.CoursesLearned", b =>
                {
                    b.Property<int>("CoursesLearnedId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("CoursesLearned_ID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CoursesLearnedId"));

                    b.Property<string>("CoursesImageUrl")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)")
                        .HasColumnName("Courses_image_url");

                    b.Property<decimal?>("DefaultPrice")
                        .HasPrecision(12, 2)
                        .HasColumnType("numeric(12,2)")
                        .HasColumnName("Default_price");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int?>("SchoolYearId")
                        .HasColumnType("integer")
                        .HasColumnName("SchoolYear_ID");

                    b.Property<string>("Syllabus")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int?>("TotalCoursesId")
                        .HasColumnType("integer")
                        .HasColumnName("TotalCourses_ID");

                    b.HasKey("CoursesLearnedId");

                    b.HasIndex("TotalCoursesId");

                    b.ToTable("CoursesLearned", "ISC_Project");
                });

            modelBuilder.Entity("ISC_Project.Models.Discipline", b =>
                {
                    b.Property<int>("DisciplineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Discipline_ID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("DisciplineId"));

                    b.Property<int?>("ClassId")
                        .HasColumnType("integer")
                        .HasColumnName("Class_ID");

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DecisionDay")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("Decision day");

                    b.Property<DateTime?>("DisciplineDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DisciplineRewardUrl")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)")
                        .HasColumnName("DisciplineRewardURL");

                    b.Property<string>("FileUrl")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)")
                        .HasColumnName("FileURL");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("User_ID");

                    b.HasKey("DisciplineId");

                    b.HasIndex("ClassId");

                    b.HasIndex("UserId");

                    b.ToTable("Discipline", "ISC_Project");
                });

            modelBuilder.Entity("ISC_Project.Models.DiscussionThread", b =>
                {
                    b.Property<int>("DiscussionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Discussion_ID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("DiscussionId"));

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool?>("IsResolved")
                        .HasColumnType("boolean")
                        .HasColumnName("Is_resolved");

                    b.Property<int?>("TeachingId")
                        .HasColumnType("integer")
                        .HasColumnName("Teaching_ID");

                    b.Property<string>("Title")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("User_ID");

                    b.Property<int?>("ViewCount")
                        .HasColumnType("integer")
                        .HasColumnName("View_count");

                    b.Property<string>("Visibility")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("DiscussionId")
                        .HasName("DiscussionThreads_pkey");

                    b.HasIndex("TeachingId");

                    b.HasIndex("UserId");

                    b.ToTable("DiscussionThreads", "ISC_Project");
                });

            modelBuilder.Entity("ISC_Project.Models.EmploymentHistory", b =>
                {
                    b.Property<int>("HistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("History_ID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("HistoryId"));

                    b.Property<string>("Certificate")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("integer")
                        .HasColumnName("CreatedByID");

                    b.Property<string>("DecidedRetireUrl")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)")
                        .HasColumnName("DecidedRetireURL");

                    b.Property<DateTime?>("EffectiveDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("Effective_date");

                    b.Property<string>("Form")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("User_ID");

                    b.HasKey("HistoryId")
                        .HasName("Employment_History_pkey");

                    b.HasIndex("UserId");

                    b.ToTable("Employment_History", "ISC_Project");
                });

            modelBuilder.Entity("ISC_Project.Models.Enrollment", b =>
                {
                    b.Property<int>("EnrollmentsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Enrollments_ID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("EnrollmentsId"));

                    b.Property<int?>("ClassId")
                        .HasColumnType("integer")
                        .HasColumnName("Class_ID");

                    b.Property<int?>("SchoolYearId")
                        .HasColumnType("integer")
                        .HasColumnName("SchoolYear_ID");

                    b.Property<string>("Status")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("User_ID");

                    b.HasKey("EnrollmentsId")
                        .HasName("Enrollments_pkey");

                    b.ToTable("Enrollments", "ISC_Project");
                });

            modelBuilder.Entity("ISC_Project.Models.Exemption", b =>
                {
                    b.Property<int>("ExemptionsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Exemptions_ID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ExemptionsId"));

                    b.Property<int?>("ClassId")
                        .HasColumnType("integer")
                        .HasColumnName("Class_ID");

                    b.Property<string>("ExemptionObjects")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("FormExemption")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("User_ID");

                    b.HasKey("ExemptionsId")
                        .HasName("Exemptions_pkey");

                    b.HasIndex("ClassId");

                    b.HasIndex("UserId");

                    b.ToTable("Exemptions", "ISC_Project");
                });

            modelBuilder.Entity("ISC_Project.Models.FacultyStudyBlock", b =>
                {
                    b.Property<int>("FacultyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Faculty_ID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("FacultyId"));

                    b.Property<string>("FacultyCode")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("FacultyName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int?>("SchoolId")
                        .HasColumnType("integer")
                        .HasColumnName("School_ID");

                    b.Property<int?>("SchoolYearId")
                        .HasColumnType("integer")
                        .HasColumnName("SchoolYear_ID");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("User_ID");

                    b.HasKey("FacultyId")
                        .HasName("Faculty - StudyBlock_pkey");

                    b.HasIndex("SchoolId");

                    b.HasIndex("SchoolYearId");

                    b.HasIndex("UserId");

                    b.ToTable("Faculty - StudyBlock", "ISC_Project");
                });

            modelBuilder.Entity("ISC_Project.Models.FamilyInformation", b =>
                {
                    b.Property<DateTime?>("BirthOfFamily")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("FamilyName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("FamilyType")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("JobFamily")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("PhoneFamily")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("User_ID");

                    b.HasIndex("UserId");

                    b.ToTable("FamilyInformation", "ISC_Project");
                });

            modelBuilder.Entity("ISC_Project.Models.Grade", b =>
                {
                    b.Property<int>("GradeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Grade_ID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("GradeId"));

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("GradesCode")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("GradesName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int?>("SchoolYearId")
                        .HasColumnType("integer")
                        .HasColumnName("SchoolYear_ID");

                    b.Property<int?>("TrainingId")
                        .HasColumnType("integer")
                        .HasColumnName("Training_ID");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("User_ID");

                    b.HasKey("GradeId");

                    b.HasIndex("TrainingId");

                    b.ToTable("Grades", "ISC_Project");
                });

            modelBuilder.Entity("ISC_Project.Models.LabGrader", b =>
                {
                    b.Property<int?>("LabSchedulesId")
                        .HasColumnType("integer")
                        .HasColumnName("LabSchedules_ID");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("User_ID");

                    b.HasIndex("LabSchedulesId");

                    b.HasIndex("UserId");

                    b.ToTable("LabGraders", "ISC_Project");
                });

            modelBuilder.Entity("ISC_Project.Models.LabSchedule", b =>
                {
                    b.Property<int>("LabSchedulesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("LabSchedules_ID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("LabSchedulesId"));

                    b.Property<int?>("DurationMinutes")
                        .HasColumnType("integer")
                        .HasColumnName("Duration_minutes");

                    b.Property<DateTime?>("LabEndDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("Lab_end_date");

                    b.Property<string>("LabName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("Lab_name");

                    b.Property<DateTime?>("LabStartDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("Lab_start_date");

                    b.Property<int?>("SchoolYearId")
                        .HasColumnType("integer")
                        .HasColumnName("SchoolYear_ID");

                    b.Property<string>("Status")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int?>("SubjectId")
                        .HasColumnType("integer")
                        .HasColumnName("Subject_ID");

                    b.Property<string>("TermNumber")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("Term_number");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("User_ID");

                    b.HasKey("LabSchedulesId")
                        .HasName("LabSchedules_pkey");

                    b.HasIndex("SubjectId");

                    b.HasIndex("UserId");

                    b.ToTable("LabSchedules", "ISC_Project");
                });

            modelBuilder.Entity("ISC_Project.Models.LabScheduleClass", b =>
                {
                    b.Property<int>("LabScheduleClassId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("LabScheduleClass-ID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("LabScheduleClassId"));

                    b.Property<int?>("ClassId")
                        .HasColumnType("integer")
                        .HasColumnName("Class_ID");

                    b.Property<int?>("LabSchedulesId")
                        .HasColumnType("integer")
                        .HasColumnName("LabSchedules_ID");

                    b.HasKey("LabScheduleClassId");

                    b.HasIndex("ClassId");

                    b.HasIndex("LabSchedulesId");

                    b.ToTable("LabScheduleClasses", "ISC_Project");
                });

            modelBuilder.Entity("ISC_Project.Models.LabScheduleQuestion", b =>
                {
                    b.Property<int>("LabScheduleQuestionsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("LabSchedule_Questions_ID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("LabScheduleQuestionsId"));

                    b.Property<int>("LabSchedulesId")
                        .HasColumnType("integer")
                        .HasColumnName("LabSchedules_ID");

                    b.Property<int>("QuestionsId")
                        .HasColumnType("integer")
                        .HasColumnName("Questions_ID");

                    b.HasKey("LabScheduleQuestionsId")
                        .HasName("LabSchedule_Questions_pkey");

                    b.HasIndex("LabSchedulesId");

                    b.HasIndex("QuestionsId");

                    b.ToTable("LabSchedule_Questions", "ISC_Project");
                });

            modelBuilder.Entity("ISC_Project.Models.LearningOutcome", b =>
                {
                    b.Property<int>("LearningOutcomes")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("LearningOutcomes"));

                    b.Property<bool?>("AcademicPerformance")
                        .HasColumnType("boolean");

                    b.Property<int?>("AverageScore")
                        .HasColumnType("integer")
                        .HasColumnName("Average score");

                    b.Property<string>("Conduct")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int?>("SchoolYearId")
                        .HasColumnType("integer")
                        .HasColumnName("SchoolYear_ID");

                    b.Property<int?>("ScoreId")
                        .HasColumnType("integer")
                        .HasColumnName("Score_ID");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("User_ID");

                    b.HasKey("LearningOutcomes")
                        .HasName("LearningOutcomes_pkey");

                    b.HasIndex("ScoreId");

                    b.HasIndex("UserId");

                    b.ToTable("LearningOutcomes", "ISC_Project");
                });

            modelBuilder.Entity("ISC_Project.Models.LiveChatMessage", b =>
                {
                    b.Property<int>("LiveChatMessagesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("LiveChatMessages_ID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("LiveChatMessagesId"));

                    b.Property<bool?>("IsPinned")
                        .HasColumnType("boolean");

                    b.Property<int?>("LiveSessionsId")
                        .HasColumnType("integer")
                        .HasColumnName("LiveSessions_ID");

                    b.Property<string>("MessageContent")
                        .HasColumnType("text")
                        .HasColumnName("Message_content");

                    b.Property<string>("MessageType")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("RecordingUrl")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)")
                        .HasColumnName("Recording_url");

                    b.Property<DateTime?>("SentAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("User_ID");

                    b.HasKey("LiveChatMessagesId")
                        .HasName("LiveChatMessages_pkey");

                    b.HasIndex("LiveSessionsId");

                    b.ToTable("LiveChatMessages", "ISC_Project");
                });

            modelBuilder.Entity("ISC_Project.Models.LiveSession", b =>
                {
                    b.Property<int>("LiveSessionsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("LiveSessions_ID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("LiveSessionsId"));

                    b.Property<DateTime?>("ActualEndTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("Actual_end_time");

                    b.Property<DateTime?>("ActualStartTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("Actual_start_time");

                    b.Property<string>("RecordingUrl")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)")
                        .HasColumnName("Recording_url");

                    b.Property<DateTime?>("ScheduledStartTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("Scheduled_start_time");

                    b.Property<string>("Status")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int?>("TeachingId")
                        .HasColumnType("integer")
                        .HasColumnName("Teaching_ID");

                    b.HasKey("LiveSessionsId")
                        .HasName("LiveSessions_pkey");

                    b.HasIndex("TeachingId");

                    b.ToTable("LiveSessions", "ISC_Project");
                });

            modelBuilder.Entity("ISC_Project.Models.Notification", b =>
                {
                    b.Property<int>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Notification_ID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("NotificationId"));

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ReceivingObject")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Title")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("User_ID");

                    b.HasKey("NotificationId");

                    b.HasIndex("UserId");

                    b.ToTable("Notification", "ISC_Project");
                });

            modelBuilder.Entity("ISC_Project.Models.PastClass", b =>
                {
                    b.Property<int>("ClassId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("ClassID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ClassId"));

                    b.Property<DateTime?>("StartTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("SubjectId")
                        .HasColumnType("integer")
                        .HasColumnName("Subject_ID");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("User_ID");

                    b.HasKey("ClassId")
                        .HasName("PastClasses_pkey");

                    b.HasIndex("SubjectId");

                    b.HasIndex("UserId");

                    b.ToTable("PastClasses", "ISC_Project");
                });

            modelBuilder.Entity("ISC_Project.Models.Permission", b =>
                {
                    b.Property<int>("PermissionsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Permissions_ID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PermissionsId"));

                    b.Property<string>("ActionName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("Action_name");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("FeatureName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("Feature_name");

                    b.HasKey("PermissionsId")
                        .HasName("Permissions_pkey");

                    b.ToTable("Permissions", "ISC_Project");
                });

            modelBuilder.Entity("ISC_Project.Models.Qualification", b =>
                {
                    b.Property<int>("QualificationsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Qualifications_ID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("QualificationsId"));

                    b.Property<string>("AttachmentUrl")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)")
                        .HasColumnName("Attachment_url");

                    b.Property<string>("DegreeName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("Degree_name");

                    b.Property<DateTime?>("Endtime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Institution")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Major")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int?>("SchoolYearId")
                        .HasColumnType("integer")
                        .HasColumnName("SchoolYear_ID");

                    b.Property<DateTime?>("StarTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("StudyForm")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("Study_form");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("User_ID");

                    b.HasKey("QualificationsId")
                        .HasName("Qualifications_pkey");

                    b.HasIndex("UserId");

                    b.ToTable("Qualifications", "ISC_Project");
                });

            modelBuilder.Entity("ISC_Project.Models.Question", b =>
                {
                    b.Property<int>("QuestionsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Questions_ID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("QuestionsId"));

                    b.Property<string>("QuestionsText")
                        .HasColumnType("text")
                        .HasColumnName("Questions_Text");

                    b.Property<string>("QuestionsType")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int?>("SubjectId")
                        .HasColumnType("integer")
                        .HasColumnName("Subject_ID");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("User_ID");

                    b.HasKey("QuestionsId")
                        .HasName("Questions_pkey");

                    b.ToTable("Questions", "ISC_Project");
                });

            modelBuilder.Entity("ISC_Project.Models.QuestionOption", b =>
                {
                    b.Property<int>("QuestionOptionsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("QuestionOptions_ID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("QuestionOptionsId"));

                    b.Property<bool?>("IsCorrect")
                        .HasColumnType("boolean")
                        .HasColumnName("Is_correct");

                    b.Property<string>("OptionText")
                        .HasColumnType("text")
                        .HasColumnName("Option_text");

                    b.Property<int?>("QuestionsId")
                        .HasColumnType("integer")
                        .HasColumnName("Questions_ID");

                    b.HasKey("QuestionOptionsId")
                        .HasName("QuestionOptions_pkey");

                    b.HasIndex("QuestionsId");

                    b.ToTable("QuestionOptions", "ISC_Project");
                });

            modelBuilder.Entity("ISC_Project.Models.Registration", b =>
                {
                    b.Property<int>("RegistrationsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Registrations_ID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("RegistrationsId"));

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<DateOnly?>("BirdDay")
                        .HasColumnType("date");

                    b.Property<string>("Campus")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int?>("CourseOfferingsId")
                        .HasColumnType("integer")
                        .HasColumnName("CourseOfferings_ID");

                    b.Property<string>("CourserName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("EducationLevel")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("Education level");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Nationality")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("PaymentStatus")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("Payment_status");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime?>("RegistrationDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("Registration_date");

                    b.Property<string>("RegistrationsImageUrl")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)")
                        .HasColumnName("Registrations_Image_Url");

                    b.Property<string>("Sex")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("StudentName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int?>("StudentUserId")
                        .HasColumnType("integer")
                        .HasColumnName("Student_user_ID");

                    b.HasKey("RegistrationsId")
                        .HasName("Registrations_pkey");

                    b.HasIndex("CourseOfferingsId");

                    b.HasIndex("StudentUserId");

                    b.ToTable("Registrations", "ISC_Project");
                });

            modelBuilder.Entity("ISC_Project.Models.RelativesInformation", b =>
                {
                    b.Property<int>("RelativesInformationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("RelativesInformation_ID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("RelativesInformationId"));

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<int?>("RegistrationsId")
                        .HasColumnType("integer")
                        .HasColumnName("Registrations_ID");

                    b.Property<string>("RelativesName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("RelativesInformationId");

                    b.HasIndex("RegistrationsId");

                    b.ToTable("RelativesInformation", "ISC_Project");
                });

            modelBuilder.Entity("ISC_Project.Models.Reserved", b =>
                {
                    b.Property<int>("ReasonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Reason_ID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ReasonId"));

                    b.Property<int?>("ClassIdmoveTo")
                        .HasColumnType("integer")
                        .HasColumnName("Class_IDMoveTo");

                    b.Property<int?>("ClassIdpresent")
                        .HasColumnType("integer")
                        .HasColumnName("Class_IDPresent");

                    b.Property<DateTime?>("DateReserved")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("FileUrl")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)")
                        .HasColumnName("FileURL");

                    b.Property<string>("Reason")
                        .HasColumnType("text");

                    b.Property<int?>("ReservedPeriod")
                        .HasColumnType("integer");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("User_ID");

                    b.HasKey("ReasonId")
                        .HasName("Reserved_pkey");

                    b.HasIndex("UserId");

                    b.ToTable("Reserved", "ISC_Project");
                });

            modelBuilder.Entity("ISC_Project.Models.Reward", b =>
                {
                    b.Property<int>("RewardId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Reward_ID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("RewardId"));

                    b.Property<int?>("ClassId")
                        .HasColumnType("integer")
                        .HasColumnName("Class_ID");

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.Property<string>("DecisionDay")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("Decision day");

                    b.Property<string>("DecisionRewardUrl")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)")
                        .HasColumnName("DecisionRewardURL");

                    b.Property<string>("Field")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("FileUrl")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)")
                        .HasColumnName("FileURL");

                    b.Property<DateTime?>("RewardDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("User_ID");

                    b.HasKey("RewardId");

                    b.HasIndex("UserId");

                    b.ToTable("Reward", "ISC_Project");
                });

            modelBuilder.Entity("ISC_Project.Models.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Role_ID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("RoleId"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool?>("IsAdmin")
                        .HasColumnType("boolean")
                        .HasColumnName("Is_admin");

                    b.Property<string>("RoleName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("RoleId");

                    b.ToTable("Role", "ISC_Project");
                });

            modelBuilder.Entity("ISC_Project.Models.RolePermission", b =>
                {
                    b.Property<int?>("PermissionsId")
                        .HasColumnType("integer")
                        .HasColumnName("Permissions_ID");

                    b.Property<int?>("RoleId")
                        .HasColumnType("integer")
                        .HasColumnName("Role_ID");

                    b.HasIndex("PermissionsId");

                    b.HasIndex("RoleId");

                    b.ToTable("RolePermissions", "ISC_Project");
                });

            modelBuilder.Entity("ISC_Project.Models.SchoolProfile", b =>
                {
                    b.Property<int>("SchoolId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("School_ID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SchoolId"));

                    b.Property<string>("CommuneWard")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("Commune/Ward");

                    b.Property<string>("DateEstablishment")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("District")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("FileUrl")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)")
                        .HasColumnName("FileURL");

                    b.Property<string>("HeadOffice")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("Head office");

                    b.Property<string>("PhoneFax")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("PhonePrincipal")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("PrincipalName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("ProvinceCity")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("Province/City");

                    b.Property<string>("SchoolCode")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("SchoolName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("SchoolType")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("TrainingModel")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("Training model");

                    b.Property<string>("Webside")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("SchoolId")
                        .HasName("SchoolProfile_pkey");

                    b.ToTable("SchoolProfile", "ISC_Project");
                });

            modelBuilder.Entity("ISC_Project.Models.SchoolYear", b =>
                {
                    b.Property<int>("SchoolYearId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("SchoolYear_ID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SchoolYearId"));

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("SchoolId")
                        .HasColumnType("integer")
                        .HasColumnName("School_ID");

                    b.Property<string>("SchoolYearName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("StarTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("User_ID");

                    b.HasKey("SchoolYearId");

                    b.HasIndex("SchoolId");

                    b.ToTable("School Year", "ISC_Project");
                });

            modelBuilder.Entity("ISC_Project.Models.Score", b =>
                {
                    b.Property<int>("ScoreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Score_ID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ScoreId"));

                    b.Property<int?>("AverageScore")
                        .HasColumnType("integer");

                    b.Property<int?>("ClassId")
                        .HasColumnType("integer")
                        .HasColumnName("Class_ID");

                    b.Property<string>("Coefficient")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int?>("SchoolYearId")
                        .HasColumnType("integer")
                        .HasColumnName("SchoolYear_ID");

                    b.Property<int?>("ScoreNumber")
                        .HasColumnType("integer");

                    b.Property<string>("ScoreType")
                        .HasColumnType("text");

                    b.Property<string>("Semester")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<int?>("SubjectsId")
                        .HasColumnType("integer")
                        .HasColumnName("Subjects_ID");

                    b.HasKey("ScoreId");

                    b.HasIndex("SubjectsId");

                    b.ToTable("Score", "ISC_Project");
                });

            modelBuilder.Entity("ISC_Project.Models.Semester", b =>
                {
                    b.Property<int>("SemesterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Semester_ID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SemesterId"));

                    b.Property<DateTime?>("EndTimeSemester")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool?>("IsCurrent")
                        .HasColumnType("boolean")
                        .HasColumnName("Is_Current");

                    b.Property<int?>("LessonOfSemester")
                        .HasColumnType("integer");

                    b.Property<int?>("SchoolYearId")
                        .HasColumnType("integer")
                        .HasColumnName("SchoolYear_ID");

                    b.Property<string>("SemesterName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("StarTimeSemester")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("SemesterId");

                    b.HasIndex("SchoolYearId");

                    b.ToTable("Semester", "ISC_Project");
                });

            modelBuilder.Entity("ISC_Project.Models.StudentGrade", b =>
                {
                    b.Property<int>("StudentGradesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Student_Grades_ID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("StudentGradesId"));

                    b.Property<string>("Comments")
                        .HasColumnType("text");

                    b.Property<DateTime?>("GradedTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("Graded_time");

                    b.Property<double?>("Score")
                        .HasColumnType("double precision");

                    b.Property<int?>("SubmissionId")
                        .HasColumnType("integer")
                        .HasColumnName("Submission_id");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("User_ID");

                    b.HasKey("StudentGradesId")
                        .HasName("Student_Grades_pkey");

                    b.HasIndex("UserId");

                    b.ToTable("Student_Grades", "ISC_Project");
                });

            modelBuilder.Entity("ISC_Project.Models.StudentMcqanswer", b =>
                {
                    b.Property<int>("StudentMcqanswersId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("StudentMCQAnswers_ID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("StudentMcqanswersId"));

                    b.Property<int?>("QuestionOptionsId")
                        .HasColumnType("integer")
                        .HasColumnName("QuestionOptions_ID");

                    b.Property<int?>("QuestionsId")
                        .HasColumnType("integer")
                        .HasColumnName("Questions_ID");

                    b.Property<int?>("SubmissionsId")
                        .HasColumnType("integer")
                        .HasColumnName("Submissions_ID");

                    b.HasKey("StudentMcqanswersId")
                        .HasName("StudentMCQAnswers_pkey");

                    b.HasIndex("QuestionOptionsId");

                    b.HasIndex("QuestionsId");

                    b.HasIndex("SubmissionsId");

                    b.ToTable("StudentMCQAnswers", "ISC_Project");
                });

            modelBuilder.Entity("ISC_Project.Models.StudentsChangeClass", b =>
                {
                    b.Property<int>("StudentsChangeClassesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("StudentsChangeClasses_ID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("StudentsChangeClassesId"));

                    b.Property<int?>("ClassIdmoveTo")
                        .HasColumnType("integer")
                        .HasColumnName("Class_IDMoveTo");

                    b.Property<int?>("ClassIdpresent")
                        .HasColumnType("integer")
                        .HasColumnName("Class_IDPresent");

                    b.Property<string>("FileUrl")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)")
                        .HasColumnName("FileURL");

                    b.Property<string>("Reason")
                        .HasColumnType("text");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("User_ID");

                    b.HasKey("StudentsChangeClassesId")
                        .HasName("StudentsChangeClasses_pkey");

                    b.HasIndex("UserId");

                    b.ToTable("StudentsChangeClasses", "ISC_Project");
                });

            modelBuilder.Entity("ISC_Project.Models.StudentsChangeSchool", b =>
                {
                    b.Property<int>("StudentsChangeSchoolId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("StudentsChangeSchool_ID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("StudentsChangeSchoolId"));

                    b.Property<string>("AddressSchoolTransferred")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)")
                        .HasColumnName("AddressSchool Transferred");

                    b.Property<string>("FileUrl")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)")
                        .HasColumnName("FileURL");

                    b.Property<string>("NameSchoolTransferred")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Reason")
                        .HasColumnType("text");

                    b.Property<int?>("SchoolYearId")
                        .HasColumnType("integer")
                        .HasColumnName("SchoolYear_ID");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("User_ID");

                    b.HasKey("StudentsChangeSchoolId");

                    b.ToTable("StudentsChangeSchool", "ISC_Project");
                });

            modelBuilder.Entity("ISC_Project.Models.StudentsProfile", b =>
                {
                    b.Property<int>("StudentsProfileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("StudentsProfile_ID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("StudentsProfileId"));

                    b.Property<DateTime?>("AdmissionDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("Admission date");

                    b.Property<int?>("ClassId")
                        .HasColumnType("integer")
                        .HasColumnName("Class_ID");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("integer")
                        .HasColumnName("Department_ID");

                    b.Property<string>("FileUrl")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)")
                        .HasColumnName("FileURL");

                    b.Property<string>("Form")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Nation")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int?>("NumberDisciplinaryActions")
                        .HasColumnType("integer");

                    b.Property<int?>("NumberRewards")
                        .HasColumnType("integer");

                    b.Property<string>("PlaceOfBirth")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Religion")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int?>("SchoolYearId")
                        .HasColumnType("integer")
                        .HasColumnName("SchoolYear_ID");

                    b.Property<string>("Sex")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Status")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("StudentCode")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("StudentName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("User_ID");

                    b.HasKey("StudentsProfileId");

                    b.ToTable("StudentsProfile", "ISC_Project");
                });

            modelBuilder.Entity("ISC_Project.Models.StudentSubmission", b =>
                {
                    b.Property<int>("SubmissionsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Submissions_ID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SubmissionsId"));

                    b.Property<int?>("AssessmentPartsId")
                        .HasColumnType("integer")
                        .HasColumnName("AssessmentParts_ID");

                    b.Property<string>("FileUrl")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)")
                        .HasColumnName("File_url");

                    b.Property<int?>("LabSchedulesId")
                        .HasColumnType("integer")
                        .HasColumnName("LabSchedules_ID");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<int?>("SchoolYearId")
                        .HasColumnType("integer")
                        .HasColumnName("SchoolYear_ID");

                    b.Property<DateTime?>("SubmissionTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("Submission_time");

                    b.Property<string>("TextAnswer")
                        .HasColumnType("text")
                        .HasColumnName("Text_answer");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("User_ID");

                    b.HasKey("SubmissionsId")
                        .HasName("Student_Submissions_pkey");

                    b.HasIndex("AssessmentPartsId");

                    b.HasIndex("LabSchedulesId");

                    b.HasIndex("UserId");

                    b.ToTable("Student_Submissions", "ISC_Project");
                });

            modelBuilder.Entity("ISC_Project.Models.Subject", b =>
                {
                    b.Property<int>("SubjectsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Subjects_ID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SubjectsId"));

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("integer")
                        .HasColumnName("Department_ID");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("SchoolYearId")
                        .HasColumnType("integer")
                        .HasColumnName("SchoolYear_ID");

                    b.Property<DateTime?>("StarTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("SubjectCode")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int?>("SubjectTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("SubjectType_ID");

                    b.Property<string>("SubjectsName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("User_ID");

                    b.HasKey("SubjectsId")
                        .HasName("Subjects_pkey");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("UserId");

                    b.ToTable("Subjects", "ISC_Project");
                });

            modelBuilder.Entity("ISC_Project.Models.SubjectsClass", b =>
                {
                    b.Property<int?>("ClassId")
                        .HasColumnType("integer")
                        .HasColumnName("Class_ID");

                    b.Property<int?>("SubjectsId")
                        .HasColumnType("integer")
                        .HasColumnName("Subjects_ID");

                    b.HasIndex("ClassId");

                    b.HasIndex("SubjectsId");

                    b.ToTable("Subjects_Class", "ISC_Project");
                });

            modelBuilder.Entity("ISC_Project.Models.SubjectType", b =>
                {
                    b.Property<int>("SubjectTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("SubjectType_ID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SubjectTypeId"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<bool?>("Status")
                        .HasColumnType("boolean");

                    b.Property<string>("SubjectTypeName")
                        .HasColumnType("text");

                    b.HasKey("SubjectTypeId");

                    b.ToTable("SubjectType", "ISC_Project");
                });

            modelBuilder.Entity("ISC_Project.Models.SyllabusTopic", b =>
                {
                    b.Property<int>("SyllabusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Syllabus_ID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SyllabusId"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("OrderIndex")
                        .HasColumnType("integer")
                        .HasColumnName("Order_index");

                    b.Property<int?>("SchoolYearId")
                        .HasColumnType("integer")
                        .HasColumnName("SchoolYear_ID");

                    b.Property<DateTime?>("StarTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("TeachingId")
                        .HasColumnType("integer")
                        .HasColumnName("Teaching_ID");

                    b.Property<string>("TopicTitle")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("Topic_title");

                    b.HasKey("SyllabusId")
                        .HasName("Syllabus_topics_pkey");

                    b.ToTable("Syllabus_topics", "ISC_Project");
                });

            modelBuilder.Entity("ISC_Project.Models.SystemSetting", b =>
                {
                    b.Property<string>("SettingKey")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("Setting_key");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("SettingValue")
                        .HasColumnType("text")
                        .HasColumnName("Setting_value");

                    b.HasKey("SettingKey")
                        .HasName("SystemSettings_pkey");

                    b.ToTable("SystemSettings", "ISC_Project");
                });

            modelBuilder.Entity("ISC_Project.Models.TeacherProfile", b =>
                {
                    b.Property<int>("TeacherId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Teacher_ID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TeacherId"));

                    b.Property<string>("Address")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<DateTime?>("AdmissionDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("Admission date");

                    b.Property<int?>("ClassId")
                        .HasColumnType("integer")
                        .HasColumnName("Class_ID");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("integer")
                        .HasColumnName("Department_ID");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("FileUrl")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)")
                        .HasColumnName("FileURL");

                    b.Property<string>("Form")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool?>("Member")
                        .HasColumnType("boolean");

                    b.Property<string>("Nation")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int?>("NumberDisciplinaryActions")
                        .HasColumnType("integer");

                    b.Property<int?>("NumberRewards")
                        .HasColumnType("integer");

                    b.Property<bool?>("PartyMember")
                        .HasColumnType("boolean")
                        .HasColumnName("Party member");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("PlaceOfBirth")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Position")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Religion")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int?>("SchoolYearId")
                        .HasColumnType("integer")
                        .HasColumnName("SchoolYear_ID");

                    b.Property<string>("Status")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int?>("SubjectId")
                        .HasColumnType("integer")
                        .HasColumnName("Subject_ID");

                    b.Property<string>("TeacherCode")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("TeacherName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("User_ID");

                    b.HasKey("TeacherId")
                        .HasName("TeacherProfile_pkey");

                    b.HasIndex("ClassId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("SubjectId");

                    b.HasIndex("UserId");

                    b.ToTable("TeacherProfile", "ISC_Project");
                });

            modelBuilder.Entity("ISC_Project.Models.TeachingAssessment", b =>
                {
                    b.Property<int>("TeachingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Teaching_ID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TeachingId"));

                    b.Property<string>("AssignmentType")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int?>("ClassId")
                        .HasColumnType("integer")
                        .HasColumnName("Class_ID");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("SchoolYearId")
                        .HasColumnType("integer")
                        .HasColumnName("SchoolYear_ID");

                    b.Property<int?>("Semester")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("StarTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("SubjectId")
                        .HasColumnType("integer")
                        .HasColumnName("Subject_ID");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("User_ID");

                    b.HasKey("TeachingId")
                        .HasName("Teaching_Assessment_pkey");

                    b.HasIndex("ClassId");

                    b.HasIndex("SubjectId");

                    b.HasIndex("UserId");

                    b.ToTable("Teaching_Assessment", "ISC_Project");
                });

            modelBuilder.Entity("ISC_Project.Models.TeamDepartment", b =>
                {
                    b.Property<int>("DepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Department_ID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("DepartmentId"));

                    b.Property<string>("DepartmentName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int?>("SchoolId")
                        .HasColumnType("integer")
                        .HasColumnName("School_ID");

                    b.Property<int?>("SchoolYearId")
                        .HasColumnType("integer")
                        .HasColumnName("SchoolYear_ID");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("User_ID");

                    b.HasKey("DepartmentId")
                        .HasName("Team-Department_pkey");

                    b.HasIndex("SchoolId");

                    b.HasIndex("SchoolYearId");

                    b.ToTable("Team-Department", "ISC_Project");
                });

            modelBuilder.Entity("ISC_Project.Models.ThreadPost", b =>
                {
                    b.Property<int>("ThreadPostsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("ThreadPosts_ID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ThreadPostsId"));

                    b.Property<string>("AttachmentUrl")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)")
                        .HasColumnName("Attachment_url");

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.Property<DateOnly?>("CreatedAt")
                        .HasColumnType("date")
                        .HasColumnName("Created_at");

                    b.Property<int?>("DiscussionId")
                        .HasColumnType("integer")
                        .HasColumnName("Discussion_ID");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("User_ID");

                    b.HasKey("ThreadPostsId")
                        .HasName("ThreadPosts_pkey");

                    b.HasIndex("DiscussionId");

                    b.HasIndex("UserId");

                    b.ToTable("ThreadPosts", "ISC_Project");
                });

            modelBuilder.Entity("ISC_Project.Models.TotalCoursesTaken", b =>
                {
                    b.Property<int>("TotalCoursesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("TotalCourses_ID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TotalCoursesId"));

                    b.Property<int?>("CoursesLearnedId")
                        .HasColumnType("integer")
                        .HasColumnName("CoursesLearned_ID");

                    b.Property<int?>("TotalNumberCourses")
                        .HasColumnType("integer");

                    b.Property<decimal?>("TotalPayment")
                        .HasPrecision(12, 2)
                        .HasColumnType("numeric(12,2)");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("User_ID");

                    b.HasKey("TotalCoursesId")
                        .HasName("TotalCoursesTaken_pkey");

                    b.HasIndex("UserId");

                    b.ToTable("TotalCoursesTaken", "ISC_Project");
                });

            modelBuilder.Entity("ISC_Project.Models.TrainingLevel", b =>
                {
                    b.Property<int>("TrainingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Training_ID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TrainingId"));

                    b.Property<int?>("DurationYears")
                        .HasColumnType("integer")
                        .HasColumnName("Duration_years");

                    b.Property<int?>("ElectiveCredits")
                        .HasColumnType("integer")
                        .HasColumnName("Elective_credits");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("Is_active");

                    b.Property<bool?>("IsCreditBased")
                        .HasColumnType("boolean")
                        .HasColumnName("Is_credit_based");

                    b.Property<DateTime?>("IsCreditYearBased")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("Is_credit_year_based");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<int?>("RequiredCredits")
                        .HasColumnType("integer")
                        .HasColumnName("Required_credits");

                    b.Property<int?>("SchoolYearId")
                        .HasColumnType("integer")
                        .HasColumnName("SchoolYear_ID");

                    b.Property<string>("TrainingForm")
                        .HasColumnType("text");

                    b.Property<string>("TrainingName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("TrainingId")
                        .HasName("TrainingLevels_pkey");

                    b.ToTable("TrainingLevels", "ISC_Project");
                });

            modelBuilder.Entity("ISC_Project.Models.UpcomingClass", b =>
                {
                    b.Property<int>("ClassId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("ClassID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ClassId"));

                    b.Property<DateTime?>("StartTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Status")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int?>("SubjectId")
                        .HasColumnType("integer")
                        .HasColumnName("Subject_ID");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("User_ID");

                    b.HasKey("ClassId")
                        .HasName("UpcomingClass_pkey");

                    b.HasIndex("SubjectId");

                    b.HasIndex("UserId");

                    b.ToTable("UpcomingClass", "ISC_Project");
                });

            modelBuilder.Entity("ISC_Project.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("User_ID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UserId"));

                    b.Property<string>("AvatarUrl")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)")
                        .HasColumnName("AvatarURL");

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("FullName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int?>("GroupId")
                        .HasColumnType("integer")
                        .HasColumnName("Group_ID");

                    b.Property<int?>("HistoryId")
                        .HasColumnType("integer")
                        .HasColumnName("History_ID");

                    b.Property<string>("Password")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int?>("RoleId")
                        .HasColumnType("integer")
                        .HasColumnName("Role_ID");

                    b.Property<int?>("SchoolYearId")
                        .HasColumnType("integer")
                        .HasColumnName("SchoolYear_ID");

                    b.Property<string>("Status")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Token")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UserName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("UserId");

                    b.HasIndex("RoleId");

                    b.ToTable("User", "ISC_Project");
                });

            modelBuilder.Entity("ISC_Project.Models.WorkHistory", b =>
                {
                    b.Property<int>("WordId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Word_ID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("WordId"));

                    b.Property<string>("CertificateName")
                        .HasColumnType("text");

                    b.Property<int?>("ClassId")
                        .HasColumnType("integer")
                        .HasColumnName("Class_ID");

                    b.Property<string>("Department")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Endtime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("OrganizationName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("Organization_name");

                    b.Property<string>("Position")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int?>("SchoolYearId")
                        .HasColumnType("integer")
                        .HasColumnName("SchoolYear_ID");

                    b.Property<DateTime?>("StarTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("TrainingType")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("User_ID");

                    b.HasKey("WordId")
                        .HasName("WorkHistories_pkey");

                    b.HasIndex("UserId");

                    b.ToTable("WorkHistories", "ISC_Project");
                });

            modelBuilder.Entity("ISC_Project.Models.AcceptingSchoolTransfer", b =>
                {
                    b.HasOne("ISC_Project.Models.User", "User")
                        .WithMany("AcceptingSchoolTransfers")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_AcceptingSchoolTransfers.User_ID");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ISC_Project.Models.AssessmentPart", b =>
                {
                    b.HasOne("ISC_Project.Models.Assignment", "Assignment")
                        .WithMany("AssessmentParts")
                        .HasForeignKey("AssignmentId")
                        .HasConstraintName("FK_AssessmentParts.Assignment_ID");

                    b.Navigation("Assignment");
                });

            modelBuilder.Entity("ISC_Project.Models.AssessmentQuestion", b =>
                {
                    b.HasOne("ISC_Project.Models.Question", "Questions")
                        .WithMany("AssessmentQuestions")
                        .HasForeignKey("QuestionsId")
                        .HasConstraintName("FK_AssessmentQuestions.Questions_ID");

                    b.Navigation("Questions");
                });

            modelBuilder.Entity("ISC_Project.Models.Assignment", b =>
                {
                    b.HasOne("ISC_Project.Models.TeachingAssessment", "Teaching")
                        .WithMany("Assignments")
                        .HasForeignKey("TeachingId")
                        .HasConstraintName("FK_Assignments.Teaching_ID");

                    b.Navigation("Teaching");
                });

            modelBuilder.Entity("ISC_Project.Models.AssignmentGroup", b =>
                {
                    b.HasOne("ISC_Project.Models.Assignment", "Assignments")
                        .WithMany()
                        .HasForeignKey("AssignmentsId")
                        .HasConstraintName("FK_Assignment_Group.Assignments_ID");

                    b.HasOne("ISC_Project.Models.Class", "Class")
                        .WithMany()
                        .HasForeignKey("ClassId")
                        .HasConstraintName("FK_Assignment_Group.Class_ID");

                    b.Navigation("Assignments");

                    b.Navigation("Class");
                });

            modelBuilder.Entity("ISC_Project.Models.Campus", b =>
                {
                    b.HasOne("ISC_Project.Models.SchoolProfile", "School")
                        .WithMany("Campuses")
                        .HasForeignKey("SchoolId")
                        .HasConstraintName("FK_Campuses.School_ID");

                    b.Navigation("School");
                });

            modelBuilder.Entity("ISC_Project.Models.ChatConversation", b =>
                {
                    b.HasOne("ISC_Project.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ISC_Project.Models.ChatMessage", b =>
                {
                    b.HasOne("ISC_Project.Models.ChatConversation", "Conversation")
                        .WithMany("Messages")
                        .HasForeignKey("ConversationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Conversation");
                });

            modelBuilder.Entity("ISC_Project.Models.Class", b =>
                {
                    b.HasOne("ISC_Project.Models.ClassType", "ClassType")
                        .WithMany("Classes")
                        .HasForeignKey("ClassTypeId")
                        .HasConstraintName("FK_Class.ClassType_ID");

                    b.HasOne("ISC_Project.Models.TeamDepartment", "Department")
                        .WithMany("Classes")
                        .HasForeignKey("DepartmentId")
                        .HasConstraintName("FK_Class.Department_ID");

                    b.HasOne("ISC_Project.Models.User", "User")
                        .WithMany("Classes")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Class.User_ID");

                    b.Navigation("ClassType");

                    b.Navigation("Department");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ISC_Project.Models.ClassDetail", b =>
                {
                    b.HasOne("ISC_Project.Models.Class", "Class")
                        .WithMany("ClassDetails")
                        .HasForeignKey("ClassId")
                        .HasConstraintName("FK_Class_Detail.Class_ID");

                    b.HasOne("ISC_Project.Models.TeamDepartment", "Department")
                        .WithMany("ClassDetails")
                        .HasForeignKey("DepartmentId")
                        .HasConstraintName("FK_Class_Detail.Department_ID");

                    b.HasOne("ISC_Project.Models.User", "User")
                        .WithMany("ClassDetails")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Class_Detail.User_ID");

                    b.Navigation("Class");

                    b.Navigation("Department");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ISC_Project.Models.ClassHistory", b =>
                {
                    b.HasOne("ISC_Project.Models.Class", "Class")
                        .WithMany("ClassHistories")
                        .HasForeignKey("ClassId")
                        .HasConstraintName("FK_ClassHistory.Class_ID");

                    b.Navigation("Class");
                });

            modelBuilder.Entity("ISC_Project.Models.ClassHistorySession", b =>
                {
                    b.HasOne("ISC_Project.Models.ClassHistory", "History")
                        .WithMany("ClassHistorySessions")
                        .HasForeignKey("HistoryId")
                        .HasConstraintName("FK_ClassHistorySession.History_ID");

                    b.Navigation("History");
                });

            modelBuilder.Entity("ISC_Project.Models.ClassroomSetting", b =>
                {
                    b.HasOne("ISC_Project.Models.Class", "Class")
                        .WithMany("ClassroomSettings")
                        .HasForeignKey("ClassId")
                        .HasConstraintName("FK_ClassroomSettings.Class_ID");

                    b.Navigation("Class");
                });

            modelBuilder.Entity("ISC_Project.Models.ClassSession", b =>
                {
                    b.HasOne("ISC_Project.Models.Class", "Class")
                        .WithMany("ClassSessions")
                        .HasForeignKey("ClassId")
                        .HasConstraintName("FK_ClassSessions.Class_ID");

                    b.HasOne("ISC_Project.Models.User", "User")
                        .WithMany("ClassSessions")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_ClassSessions.User_ID");

                    b.Navigation("Class");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ISC_Project.Models.Course", b =>
                {
                    b.HasOne("ISC_Project.Models.CourseCategory", "CourseCategories")
                        .WithMany("Courses")
                        .HasForeignKey("CourseCategoriesId")
                        .HasConstraintName("FK_Courses.CourseCategories_ID");

                    b.Navigation("CourseCategories");
                });

            modelBuilder.Entity("ISC_Project.Models.CourseLesson", b =>
                {
                    b.HasOne("ISC_Project.Models.CourseOffering", "CourseOfferings")
                        .WithMany("CourseLessons")
                        .HasForeignKey("CourseOfferingsId")
                        .HasConstraintName("FK_CourseLessons.CourseOfferings_ID");

                    b.HasOne("ISC_Project.Models.SchoolProfile", "School")
                        .WithMany("CourseLessons")
                        .HasForeignKey("SchoolId")
                        .HasConstraintName("FK_CourseLessons.School_ID");

                    b.Navigation("CourseOfferings");

                    b.Navigation("School");
                });

            modelBuilder.Entity("ISC_Project.Models.CourseOffering", b =>
                {
                    b.HasOne("ISC_Project.Models.Course", "Courses")
                        .WithMany("CourseOfferings")
                        .HasForeignKey("CoursesId")
                        .HasConstraintName("FK_CourseOfferings.Courses_ID");

                    b.HasOne("ISC_Project.Models.User", "InstructorUser")
                        .WithMany("CourseOfferings")
                        .HasForeignKey("InstructorUserId")
                        .HasConstraintName("FK_CourseOfferings.Instructor_user_id");

                    b.Navigation("Courses");

                    b.Navigation("InstructorUser");
                });

            modelBuilder.Entity("ISC_Project.Models.CoursesLearned", b =>
                {
                    b.HasOne("ISC_Project.Models.TotalCoursesTaken", "TotalCourses")
                        .WithMany("CoursesLearneds")
                        .HasForeignKey("TotalCoursesId")
                        .HasConstraintName("FK_CoursesLearned.TotalCourses_ID");

                    b.Navigation("TotalCourses");
                });

            modelBuilder.Entity("ISC_Project.Models.Discipline", b =>
                {
                    b.HasOne("ISC_Project.Models.Class", "Class")
                        .WithMany("Disciplines")
                        .HasForeignKey("ClassId")
                        .HasConstraintName("FK_Discipline.Class_ID");

                    b.HasOne("ISC_Project.Models.User", "User")
                        .WithMany("Disciplines")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Discipline.User_ID");

                    b.Navigation("Class");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ISC_Project.Models.DiscussionThread", b =>
                {
                    b.HasOne("ISC_Project.Models.TeachingAssessment", "Teaching")
                        .WithMany("DiscussionThreads")
                        .HasForeignKey("TeachingId")
                        .HasConstraintName("FK_DiscussionThreads.Teaching_ID");

                    b.HasOne("ISC_Project.Models.User", "User")
                        .WithMany("DiscussionThreads")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_DiscussionThreads.User_ID");

                    b.Navigation("Teaching");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ISC_Project.Models.EmploymentHistory", b =>
                {
                    b.HasOne("ISC_Project.Models.User", "User")
                        .WithMany("EmploymentHistories")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Employment_History.User_ID");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ISC_Project.Models.Exemption", b =>
                {
                    b.HasOne("ISC_Project.Models.Class", "Class")
                        .WithMany("Exemptions")
                        .HasForeignKey("ClassId")
                        .HasConstraintName("FK_Exemptions.Class_ID");

                    b.HasOne("ISC_Project.Models.User", "User")
                        .WithMany("Exemptions")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Exemptions.User_ID");

                    b.Navigation("Class");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ISC_Project.Models.FacultyStudyBlock", b =>
                {
                    b.HasOne("ISC_Project.Models.SchoolProfile", "School")
                        .WithMany("FacultyStudyBlocks")
                        .HasForeignKey("SchoolId")
                        .HasConstraintName("FK_Faculty - StudyBlock.School_ID");

                    b.HasOne("ISC_Project.Models.SchoolYear", "SchoolYear")
                        .WithMany("FacultyStudyBlocks")
                        .HasForeignKey("SchoolYearId")
                        .HasConstraintName("FK_Faculty - StudyBlock.SchoolYear_ID");

                    b.HasOne("ISC_Project.Models.User", "User")
                        .WithMany("FacultyStudyBlocks")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Faculty - StudyBlock.User_ID");

                    b.Navigation("School");

                    b.Navigation("SchoolYear");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ISC_Project.Models.FamilyInformation", b =>
                {
                    b.HasOne("ISC_Project.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_FamilyInformation.User_ID");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ISC_Project.Models.Grade", b =>
                {
                    b.HasOne("ISC_Project.Models.TrainingLevel", "Training")
                        .WithMany("Grades")
                        .HasForeignKey("TrainingId")
                        .HasConstraintName("FK_Grades.Training_ID");

                    b.Navigation("Training");
                });

            modelBuilder.Entity("ISC_Project.Models.LabGrader", b =>
                {
                    b.HasOne("ISC_Project.Models.LabSchedule", "LabSchedules")
                        .WithMany()
                        .HasForeignKey("LabSchedulesId")
                        .HasConstraintName("FK_LabGraders.LabSchedules_ID");

                    b.HasOne("ISC_Project.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_LabGraders.User_ID");

                    b.Navigation("LabSchedules");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ISC_Project.Models.LabSchedule", b =>
                {
                    b.HasOne("ISC_Project.Models.Subject", "Subject")
                        .WithMany("LabSchedules")
                        .HasForeignKey("SubjectId")
                        .HasConstraintName("FK_LabSchedules.Subject_ID");

                    b.HasOne("ISC_Project.Models.User", "User")
                        .WithMany("LabSchedules")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_LabSchedules.User_ID");

                    b.Navigation("Subject");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ISC_Project.Models.LabScheduleClass", b =>
                {
                    b.HasOne("ISC_Project.Models.Class", "Class")
                        .WithMany("LabScheduleClasses")
                        .HasForeignKey("ClassId")
                        .HasConstraintName("FK_LabScheduleClasses.Class_ID");

                    b.HasOne("ISC_Project.Models.LabSchedule", "LabSchedules")
                        .WithMany("LabScheduleClasses")
                        .HasForeignKey("LabSchedulesId")
                        .HasConstraintName("FK_LabScheduleClasses.LabSchedules_ID");

                    b.Navigation("Class");

                    b.Navigation("LabSchedules");
                });

            modelBuilder.Entity("ISC_Project.Models.LabScheduleQuestion", b =>
                {
                    b.HasOne("ISC_Project.Models.LabSchedule", "LabSchedules")
                        .WithMany("LabScheduleQuestions")
                        .HasForeignKey("LabSchedulesId")
                        .IsRequired()
                        .HasConstraintName("FK_LabSchedule_Questions.LabSchedules_ID");

                    b.HasOne("ISC_Project.Models.Question", "Questions")
                        .WithMany("LabScheduleQuestions")
                        .HasForeignKey("QuestionsId")
                        .IsRequired()
                        .HasConstraintName("FK_LabSchedule_Questions.Questions_ID");

                    b.Navigation("LabSchedules");

                    b.Navigation("Questions");
                });

            modelBuilder.Entity("ISC_Project.Models.LearningOutcome", b =>
                {
                    b.HasOne("ISC_Project.Models.Score", "Score")
                        .WithMany("LearningOutcomes")
                        .HasForeignKey("ScoreId")
                        .HasConstraintName("FK_LearningOutcomes.Score_ID");

                    b.HasOne("ISC_Project.Models.User", "User")
                        .WithMany("LearningOutcomes")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_LearningOutcomes.User_ID");

                    b.Navigation("Score");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ISC_Project.Models.LiveChatMessage", b =>
                {
                    b.HasOne("ISC_Project.Models.LiveSession", "LiveSessions")
                        .WithMany("LiveChatMessages")
                        .HasForeignKey("LiveSessionsId")
                        .HasConstraintName("FK_LiveChatMessages.LiveSessions_ID");

                    b.Navigation("LiveSessions");
                });

            modelBuilder.Entity("ISC_Project.Models.LiveSession", b =>
                {
                    b.HasOne("ISC_Project.Models.TeachingAssessment", "Teaching")
                        .WithMany("LiveSessions")
                        .HasForeignKey("TeachingId")
                        .HasConstraintName("FK_LiveSessions.Teaching_ID");

                    b.Navigation("Teaching");
                });

            modelBuilder.Entity("ISC_Project.Models.Notification", b =>
                {
                    b.HasOne("ISC_Project.Models.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Notification.User_ID");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ISC_Project.Models.PastClass", b =>
                {
                    b.HasOne("ISC_Project.Models.Subject", "Subject")
                        .WithMany("PastClasses")
                        .HasForeignKey("SubjectId")
                        .HasConstraintName("FK_PastClasses.Subject_ID");

                    b.HasOne("ISC_Project.Models.User", "User")
                        .WithMany("PastClasses")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_PastClasses.User_ID");

                    b.Navigation("Subject");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ISC_Project.Models.Qualification", b =>
                {
                    b.HasOne("ISC_Project.Models.User", "User")
                        .WithMany("Qualifications")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Qualifications.User_ID");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ISC_Project.Models.QuestionOption", b =>
                {
                    b.HasOne("ISC_Project.Models.Question", "Questions")
                        .WithMany("QuestionOptions")
                        .HasForeignKey("QuestionsId")
                        .HasConstraintName("FK_QuestionOptions.Questions_ID");

                    b.Navigation("Questions");
                });

            modelBuilder.Entity("ISC_Project.Models.Registration", b =>
                {
                    b.HasOne("ISC_Project.Models.CourseOffering", "CourseOfferings")
                        .WithMany("Registrations")
                        .HasForeignKey("CourseOfferingsId")
                        .HasConstraintName("FK_Registrations.CourseOfferings_ID");

                    b.HasOne("ISC_Project.Models.User", "StudentUser")
                        .WithMany("Registrations")
                        .HasForeignKey("StudentUserId")
                        .HasConstraintName("FK_Registrations.Student_user_ID");

                    b.Navigation("CourseOfferings");

                    b.Navigation("StudentUser");
                });

            modelBuilder.Entity("ISC_Project.Models.RelativesInformation", b =>
                {
                    b.HasOne("ISC_Project.Models.Registration", "Registrations")
                        .WithMany("RelativesInformations")
                        .HasForeignKey("RegistrationsId")
                        .HasConstraintName("FK_RelativesInformation.Registrations_ID");

                    b.Navigation("Registrations");
                });

            modelBuilder.Entity("ISC_Project.Models.Reserved", b =>
                {
                    b.HasOne("ISC_Project.Models.User", "User")
                        .WithMany("Reserveds")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Reserved.User_ID");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ISC_Project.Models.Reward", b =>
                {
                    b.HasOne("ISC_Project.Models.User", "User")
                        .WithMany("Rewards")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Reward.User_ID");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ISC_Project.Models.RolePermission", b =>
                {
                    b.HasOne("ISC_Project.Models.Permission", "Permissions")
                        .WithMany()
                        .HasForeignKey("PermissionsId")
                        .HasConstraintName("FK_RolePermissions.Permissions_ID");

                    b.HasOne("ISC_Project.Models.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK_RolePermissions.Role_ID");

                    b.Navigation("Permissions");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("ISC_Project.Models.SchoolYear", b =>
                {
                    b.HasOne("ISC_Project.Models.SchoolProfile", "School")
                        .WithMany("SchoolYears")
                        .HasForeignKey("SchoolId")
                        .HasConstraintName("FK_School Year.School_ID");

                    b.Navigation("School");
                });

            modelBuilder.Entity("ISC_Project.Models.Score", b =>
                {
                    b.HasOne("ISC_Project.Models.Subject", "Subjects")
                        .WithMany("Scores")
                        .HasForeignKey("SubjectsId")
                        .HasConstraintName("FK_Score.Subjects_ID");

                    b.Navigation("Subjects");
                });

            modelBuilder.Entity("ISC_Project.Models.Semester", b =>
                {
                    b.HasOne("ISC_Project.Models.SchoolYear", "SchoolYear")
                        .WithMany("Semesters")
                        .HasForeignKey("SchoolYearId")
                        .HasConstraintName("FK_Semester.SchoolYear_ID");

                    b.Navigation("SchoolYear");
                });

            modelBuilder.Entity("ISC_Project.Models.StudentGrade", b =>
                {
                    b.HasOne("ISC_Project.Models.User", "User")
                        .WithMany("StudentGrades")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Student_Grades.User_ID");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ISC_Project.Models.StudentMcqanswer", b =>
                {
                    b.HasOne("ISC_Project.Models.QuestionOption", "QuestionOptions")
                        .WithMany("StudentMcqanswers")
                        .HasForeignKey("QuestionOptionsId")
                        .HasConstraintName("FK_StudentMCQAnswers.QuestionOptions_ID");

                    b.HasOne("ISC_Project.Models.Question", "Questions")
                        .WithMany("StudentMcqanswers")
                        .HasForeignKey("QuestionsId")
                        .HasConstraintName("FK_StudentMCQAnswers.Questions_ID");

                    b.HasOne("ISC_Project.Models.StudentSubmission", "Submissions")
                        .WithMany("StudentMcqanswers")
                        .HasForeignKey("SubmissionsId")
                        .HasConstraintName("FK_StudentMCQAnswers.Submissions_ID");

                    b.Navigation("QuestionOptions");

                    b.Navigation("Questions");

                    b.Navigation("Submissions");
                });

            modelBuilder.Entity("ISC_Project.Models.StudentsChangeClass", b =>
                {
                    b.HasOne("ISC_Project.Models.User", "User")
                        .WithMany("StudentsChangeClasses")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_StudentsChangeClasses.User_ID");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ISC_Project.Models.StudentSubmission", b =>
                {
                    b.HasOne("ISC_Project.Models.AssessmentPart", "AssessmentParts")
                        .WithMany("StudentSubmissions")
                        .HasForeignKey("AssessmentPartsId")
                        .HasConstraintName("FK_Student_Submissions.AssessmentParts_ID");

                    b.HasOne("ISC_Project.Models.LabSchedule", "LabSchedules")
                        .WithMany("StudentSubmissions")
                        .HasForeignKey("LabSchedulesId")
                        .HasConstraintName("FK_Student_Submissions.LabSchedules_ID");

                    b.HasOne("ISC_Project.Models.User", "User")
                        .WithMany("StudentSubmissions")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Student_Submissions.User_ID");

                    b.Navigation("AssessmentParts");

                    b.Navigation("LabSchedules");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ISC_Project.Models.Subject", b =>
                {
                    b.HasOne("ISC_Project.Models.TeamDepartment", "Department")
                        .WithMany("Subjects")
                        .HasForeignKey("DepartmentId")
                        .HasConstraintName("FK_Subjects.Department_ID");

                    b.HasOne("ISC_Project.Models.User", "User")
                        .WithMany("Subjects")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Subjects.User_ID");

                    b.Navigation("Department");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ISC_Project.Models.SubjectsClass", b =>
                {
                    b.HasOne("ISC_Project.Models.Class", "Class")
                        .WithMany()
                        .HasForeignKey("ClassId")
                        .HasConstraintName("FK_Subjects_Class.Class_ID");

                    b.HasOne("ISC_Project.Models.Subject", "Subjects")
                        .WithMany()
                        .HasForeignKey("SubjectsId")
                        .HasConstraintName("FK_Subjects_Class.Subjects_ID");

                    b.Navigation("Class");

                    b.Navigation("Subjects");
                });

            modelBuilder.Entity("ISC_Project.Models.TeacherProfile", b =>
                {
                    b.HasOne("ISC_Project.Models.Class", "Class")
                        .WithMany("TeacherProfiles")
                        .HasForeignKey("ClassId")
                        .HasConstraintName("FK_TeacherProfile.Class_ID");

                    b.HasOne("ISC_Project.Models.TeamDepartment", "Department")
                        .WithMany("TeacherProfiles")
                        .HasForeignKey("DepartmentId")
                        .HasConstraintName("FK_TeacherProfile.Department_ID");

                    b.HasOne("ISC_Project.Models.Subject", "Subject")
                        .WithMany("TeacherProfiles")
                        .HasForeignKey("SubjectId")
                        .HasConstraintName("FK_TeacherProfile.Subject_ID");

                    b.HasOne("ISC_Project.Models.User", "User")
                        .WithMany("TeacherProfiles")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_TeacherProfile.User_ID");

                    b.Navigation("Class");

                    b.Navigation("Department");

                    b.Navigation("Subject");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ISC_Project.Models.TeachingAssessment", b =>
                {
                    b.HasOne("ISC_Project.Models.Class", "Class")
                        .WithMany("TeachingAssessments")
                        .HasForeignKey("ClassId")
                        .HasConstraintName("FK_Teaching_Assessment.Class_ID");

                    b.HasOne("ISC_Project.Models.Subject", "Subject")
                        .WithMany("TeachingAssessments")
                        .HasForeignKey("SubjectId")
                        .HasConstraintName("FK_Teaching_Assessment.Subject_ID");

                    b.HasOne("ISC_Project.Models.User", "User")
                        .WithMany("TeachingAssessments")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Teaching_Assessment.User_ID");

                    b.Navigation("Class");

                    b.Navigation("Subject");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ISC_Project.Models.TeamDepartment", b =>
                {
                    b.HasOne("ISC_Project.Models.SchoolProfile", "School")
                        .WithMany("TeamDepartments")
                        .HasForeignKey("SchoolId")
                        .HasConstraintName("FK_Team-Department.School_ID");

                    b.HasOne("ISC_Project.Models.User", "SchoolYear")
                        .WithMany("TeamDepartments")
                        .HasForeignKey("SchoolYearId")
                        .HasConstraintName("FK_Team-Department.SchoolYear_ID");

                    b.Navigation("School");

                    b.Navigation("SchoolYear");
                });

            modelBuilder.Entity("ISC_Project.Models.ThreadPost", b =>
                {
                    b.HasOne("ISC_Project.Models.DiscussionThread", "Discussion")
                        .WithMany("ThreadPosts")
                        .HasForeignKey("DiscussionId")
                        .HasConstraintName("FK_ThreadPosts.Discussion_ID");

                    b.HasOne("ISC_Project.Models.User", "User")
                        .WithMany("ThreadPosts")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_ThreadPosts.User_ID");

                    b.Navigation("Discussion");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ISC_Project.Models.TotalCoursesTaken", b =>
                {
                    b.HasOne("ISC_Project.Models.User", "User")
                        .WithMany("TotalCoursesTakens")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_TotalCoursesTaken.User_ID");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ISC_Project.Models.UpcomingClass", b =>
                {
                    b.HasOne("ISC_Project.Models.Subject", "Subject")
                        .WithMany("UpcomingClasses")
                        .HasForeignKey("SubjectId")
                        .HasConstraintName("FK_UpcomingClass.Subject_ID");

                    b.HasOne("ISC_Project.Models.User", "User")
                        .WithMany("UpcomingClasses")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_UpcomingClass.User_ID");

                    b.Navigation("Subject");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ISC_Project.Models.User", b =>
                {
                    b.HasOne("ISC_Project.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK_User.Role_ID");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("ISC_Project.Models.WorkHistory", b =>
                {
                    b.HasOne("ISC_Project.Models.User", "User")
                        .WithMany("WorkHistories")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_WorkHistories.User_ID");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ISC_Project.Models.AssessmentPart", b =>
                {
                    b.Navigation("StudentSubmissions");
                });

            modelBuilder.Entity("ISC_Project.Models.Assignment", b =>
                {
                    b.Navigation("AssessmentParts");
                });

            modelBuilder.Entity("ISC_Project.Models.ChatConversation", b =>
                {
                    b.Navigation("Messages");
                });

            modelBuilder.Entity("ISC_Project.Models.Class", b =>
                {
                    b.Navigation("ClassDetails");

                    b.Navigation("ClassHistories");

                    b.Navigation("ClassSessions");

                    b.Navigation("ClassroomSettings");

                    b.Navigation("Disciplines");

                    b.Navigation("Exemptions");

                    b.Navigation("LabScheduleClasses");

                    b.Navigation("TeacherProfiles");

                    b.Navigation("TeachingAssessments");
                });

            modelBuilder.Entity("ISC_Project.Models.ClassHistory", b =>
                {
                    b.Navigation("ClassHistorySessions");
                });

            modelBuilder.Entity("ISC_Project.Models.ClassType", b =>
                {
                    b.Navigation("Classes");
                });

            modelBuilder.Entity("ISC_Project.Models.Course", b =>
                {
                    b.Navigation("CourseOfferings");
                });

            modelBuilder.Entity("ISC_Project.Models.CourseCategory", b =>
                {
                    b.Navigation("Courses");
                });

            modelBuilder.Entity("ISC_Project.Models.CourseOffering", b =>
                {
                    b.Navigation("CourseLessons");

                    b.Navigation("Registrations");
                });

            modelBuilder.Entity("ISC_Project.Models.DiscussionThread", b =>
                {
                    b.Navigation("ThreadPosts");
                });

            modelBuilder.Entity("ISC_Project.Models.LabSchedule", b =>
                {
                    b.Navigation("LabScheduleClasses");

                    b.Navigation("LabScheduleQuestions");

                    b.Navigation("StudentSubmissions");
                });

            modelBuilder.Entity("ISC_Project.Models.LiveSession", b =>
                {
                    b.Navigation("LiveChatMessages");
                });

            modelBuilder.Entity("ISC_Project.Models.Question", b =>
                {
                    b.Navigation("AssessmentQuestions");

                    b.Navigation("LabScheduleQuestions");

                    b.Navigation("QuestionOptions");

                    b.Navigation("StudentMcqanswers");
                });

            modelBuilder.Entity("ISC_Project.Models.QuestionOption", b =>
                {
                    b.Navigation("StudentMcqanswers");
                });

            modelBuilder.Entity("ISC_Project.Models.Registration", b =>
                {
                    b.Navigation("RelativesInformations");
                });

            modelBuilder.Entity("ISC_Project.Models.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("ISC_Project.Models.SchoolProfile", b =>
                {
                    b.Navigation("Campuses");

                    b.Navigation("CourseLessons");

                    b.Navigation("FacultyStudyBlocks");

                    b.Navigation("SchoolYears");

                    b.Navigation("TeamDepartments");
                });

            modelBuilder.Entity("ISC_Project.Models.SchoolYear", b =>
                {
                    b.Navigation("FacultyStudyBlocks");

                    b.Navigation("Semesters");
                });

            modelBuilder.Entity("ISC_Project.Models.Score", b =>
                {
                    b.Navigation("LearningOutcomes");
                });

            modelBuilder.Entity("ISC_Project.Models.StudentSubmission", b =>
                {
                    b.Navigation("StudentMcqanswers");
                });

            modelBuilder.Entity("ISC_Project.Models.Subject", b =>
                {
                    b.Navigation("LabSchedules");

                    b.Navigation("PastClasses");

                    b.Navigation("Scores");

                    b.Navigation("TeacherProfiles");

                    b.Navigation("TeachingAssessments");

                    b.Navigation("UpcomingClasses");
                });

            modelBuilder.Entity("ISC_Project.Models.TeachingAssessment", b =>
                {
                    b.Navigation("Assignments");

                    b.Navigation("DiscussionThreads");

                    b.Navigation("LiveSessions");
                });

            modelBuilder.Entity("ISC_Project.Models.TeamDepartment", b =>
                {
                    b.Navigation("ClassDetails");

                    b.Navigation("Classes");

                    b.Navigation("Subjects");

                    b.Navigation("TeacherProfiles");
                });

            modelBuilder.Entity("ISC_Project.Models.TotalCoursesTaken", b =>
                {
                    b.Navigation("CoursesLearneds");
                });

            modelBuilder.Entity("ISC_Project.Models.TrainingLevel", b =>
                {
                    b.Navigation("Grades");
                });

            modelBuilder.Entity("ISC_Project.Models.User", b =>
                {
                    b.Navigation("AcceptingSchoolTransfers");

                    b.Navigation("ClassDetails");

                    b.Navigation("ClassSessions");

                    b.Navigation("Classes");

                    b.Navigation("CourseOfferings");

                    b.Navigation("Disciplines");

                    b.Navigation("DiscussionThreads");

                    b.Navigation("EmploymentHistories");

                    b.Navigation("Exemptions");

                    b.Navigation("FacultyStudyBlocks");

                    b.Navigation("LabSchedules");

                    b.Navigation("LearningOutcomes");

                    b.Navigation("Notifications");

                    b.Navigation("PastClasses");

                    b.Navigation("Qualifications");

                    b.Navigation("Registrations");

                    b.Navigation("Reserveds");

                    b.Navigation("Rewards");

                    b.Navigation("StudentGrades");

                    b.Navigation("StudentSubmissions");

                    b.Navigation("StudentsChangeClasses");

                    b.Navigation("Subjects");

                    b.Navigation("TeacherProfiles");

                    b.Navigation("TeachingAssessments");

                    b.Navigation("TeamDepartments");

                    b.Navigation("ThreadPosts");

                    b.Navigation("TotalCoursesTakens");

                    b.Navigation("UpcomingClasses");

                    b.Navigation("WorkHistories");
                });
#pragma warning restore 612, 618
        }
    }
}
